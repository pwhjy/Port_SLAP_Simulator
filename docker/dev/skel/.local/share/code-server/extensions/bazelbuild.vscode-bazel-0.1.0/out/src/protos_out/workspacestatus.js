"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
goog.provide('proto.build_event_stream.WorkspaceStatus');
goog.provide('proto.build_event_stream.WorkspaceStatus.Item');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.WorkspaceStatus = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.build_event_stream.WorkspaceStatus.repeatedFields_, null);
};
goog.inherits(proto.build_event_stream.WorkspaceStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.WorkspaceStatus.displayName = 'proto.build_event_stream.WorkspaceStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.build_event_stream.WorkspaceStatus.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.WorkspaceStatus.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.WorkspaceStatus.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.WorkspaceStatus} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.WorkspaceStatus.toObject = function (includeInstance, msg) {
        var f, obj = {
            itemList: jspb.Message.toObjectList(msg.getItemList(), proto.build_event_stream.WorkspaceStatus.Item.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.WorkspaceStatus}
 */
proto.build_event_stream.WorkspaceStatus.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.WorkspaceStatus;
    return proto.build_event_stream.WorkspaceStatus.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.WorkspaceStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.WorkspaceStatus}
 */
proto.build_event_stream.WorkspaceStatus.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.build_event_stream.WorkspaceStatus.Item;
                reader.readMessage(value, proto.build_event_stream.WorkspaceStatus.Item.deserializeBinaryFromReader);
                msg.addItem(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.WorkspaceStatus.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.WorkspaceStatus.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.WorkspaceStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.WorkspaceStatus.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getItemList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.build_event_stream.WorkspaceStatus.Item.serializeBinaryToWriter);
    }
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.WorkspaceStatus.Item = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.WorkspaceStatus.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.WorkspaceStatus.Item.displayName = 'proto.build_event_stream.WorkspaceStatus.Item';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.WorkspaceStatus.Item.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.WorkspaceStatus.Item.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.WorkspaceStatus.Item} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.WorkspaceStatus.Item.toObject = function (includeInstance, msg) {
        var f, obj = {
            key: jspb.Message.getFieldWithDefault(msg, 1, ""),
            value: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.WorkspaceStatus.Item}
 */
proto.build_event_stream.WorkspaceStatus.Item.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.WorkspaceStatus.Item;
    return proto.build_event_stream.WorkspaceStatus.Item.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.WorkspaceStatus.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.WorkspaceStatus.Item}
 */
proto.build_event_stream.WorkspaceStatus.Item.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.WorkspaceStatus.Item.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.WorkspaceStatus.Item.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.WorkspaceStatus.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.WorkspaceStatus.Item.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string key = 1;
 * @return {string}
 */
proto.build_event_stream.WorkspaceStatus.Item.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.WorkspaceStatus.Item.prototype.setKey = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional string value = 2;
 * @return {string}
 */
proto.build_event_stream.WorkspaceStatus.Item.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.build_event_stream.WorkspaceStatus.Item.prototype.setValue = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * repeated Item item = 1;
 * @return {!Array.<!proto.build_event_stream.WorkspaceStatus.Item>}
 */
proto.build_event_stream.WorkspaceStatus.prototype.getItemList = function () {
    return /** @type{!Array.<!proto.build_event_stream.WorkspaceStatus.Item>} */ (jspb.Message.getRepeatedWrapperField(this, proto.build_event_stream.WorkspaceStatus.Item, 1));
};
/** @param {!Array.<!proto.build_event_stream.WorkspaceStatus.Item>} value */
proto.build_event_stream.WorkspaceStatus.prototype.setItemList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.build_event_stream.WorkspaceStatus.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.build_event_stream.WorkspaceStatus.Item}
 */
proto.build_event_stream.WorkspaceStatus.prototype.addItem = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.build_event_stream.WorkspaceStatus.Item, opt_index);
};
proto.build_event_stream.WorkspaceStatus.prototype.clearItemList = function () {
    this.setItemList([]);
};
//# sourceMappingURL=workspacestatus.js.map