"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.skylark_debugging.Breakpoint', null, global);
goog.exportSymbol('proto.skylark_debugging.ContinueExecutionRequest', null, global);
goog.exportSymbol('proto.skylark_debugging.ContinueExecutionResponse', null, global);
goog.exportSymbol('proto.skylark_debugging.DebugEvent', null, global);
goog.exportSymbol('proto.skylark_debugging.DebugRequest', null, global);
goog.exportSymbol('proto.skylark_debugging.Error', null, global);
goog.exportSymbol('proto.skylark_debugging.EvaluateRequest', null, global);
goog.exportSymbol('proto.skylark_debugging.EvaluateResponse', null, global);
goog.exportSymbol('proto.skylark_debugging.Frame', null, global);
goog.exportSymbol('proto.skylark_debugging.GetChildrenRequest', null, global);
goog.exportSymbol('proto.skylark_debugging.GetChildrenResponse', null, global);
goog.exportSymbol('proto.skylark_debugging.ListFramesRequest', null, global);
goog.exportSymbol('proto.skylark_debugging.ListFramesResponse', null, global);
goog.exportSymbol('proto.skylark_debugging.Location', null, global);
goog.exportSymbol('proto.skylark_debugging.PauseReason', null, global);
goog.exportSymbol('proto.skylark_debugging.PauseThreadRequest', null, global);
goog.exportSymbol('proto.skylark_debugging.PauseThreadResponse', null, global);
goog.exportSymbol('proto.skylark_debugging.PausedThread', null, global);
goog.exportSymbol('proto.skylark_debugging.Scope', null, global);
goog.exportSymbol('proto.skylark_debugging.SetBreakpointsRequest', null, global);
goog.exportSymbol('proto.skylark_debugging.SetBreakpointsResponse', null, global);
goog.exportSymbol('proto.skylark_debugging.StartDebuggingRequest', null, global);
goog.exportSymbol('proto.skylark_debugging.StartDebuggingResponse', null, global);
goog.exportSymbol('proto.skylark_debugging.Stepping', null, global);
goog.exportSymbol('proto.skylark_debugging.ThreadContinuedEvent', null, global);
goog.exportSymbol('proto.skylark_debugging.ThreadPausedEvent', null, global);
goog.exportSymbol('proto.skylark_debugging.Value', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.DebugRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.skylark_debugging.DebugRequest.oneofGroups_);
};
goog.inherits(proto.skylark_debugging.DebugRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.DebugRequest.displayName = 'proto.skylark_debugging.DebugRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.skylark_debugging.DebugRequest.oneofGroups_ = [[101, 102, 103, 104, 105, 106, 107]];
/**
 * @enum {number}
 */
proto.skylark_debugging.DebugRequest.PayloadCase = {
    PAYLOAD_NOT_SET: 0,
    SET_BREAKPOINTS: 101,
    CONTINUE_EXECUTION: 102,
    EVALUATE: 103,
    LIST_FRAMES: 104,
    START_DEBUGGING: 105,
    PAUSE_THREAD: 106,
    GET_CHILDREN: 107
};
/**
 * @return {proto.skylark_debugging.DebugRequest.PayloadCase}
 */
proto.skylark_debugging.DebugRequest.prototype.getPayloadCase = function () {
    return /** @type {proto.skylark_debugging.DebugRequest.PayloadCase} */ (jspb.Message.computeOneofCase(this, proto.skylark_debugging.DebugRequest.oneofGroups_[0]));
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.DebugRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.DebugRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.DebugRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.DebugRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            sequenceNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
            setBreakpoints: (f = msg.getSetBreakpoints()) && proto.skylark_debugging.SetBreakpointsRequest.toObject(includeInstance, f),
            continueExecution: (f = msg.getContinueExecution()) && proto.skylark_debugging.ContinueExecutionRequest.toObject(includeInstance, f),
            evaluate: (f = msg.getEvaluate()) && proto.skylark_debugging.EvaluateRequest.toObject(includeInstance, f),
            listFrames: (f = msg.getListFrames()) && proto.skylark_debugging.ListFramesRequest.toObject(includeInstance, f),
            startDebugging: (f = msg.getStartDebugging()) && proto.skylark_debugging.StartDebuggingRequest.toObject(includeInstance, f),
            pauseThread: (f = msg.getPauseThread()) && proto.skylark_debugging.PauseThreadRequest.toObject(includeInstance, f),
            getChildren: (f = msg.getGetChildren()) && proto.skylark_debugging.GetChildrenRequest.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.DebugRequest}
 */
proto.skylark_debugging.DebugRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.DebugRequest;
    return proto.skylark_debugging.DebugRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.DebugRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.DebugRequest}
 */
proto.skylark_debugging.DebugRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setSequenceNumber(value);
                break;
            case 101:
                var value = new proto.skylark_debugging.SetBreakpointsRequest;
                reader.readMessage(value, proto.skylark_debugging.SetBreakpointsRequest.deserializeBinaryFromReader);
                msg.setSetBreakpoints(value);
                break;
            case 102:
                var value = new proto.skylark_debugging.ContinueExecutionRequest;
                reader.readMessage(value, proto.skylark_debugging.ContinueExecutionRequest.deserializeBinaryFromReader);
                msg.setContinueExecution(value);
                break;
            case 103:
                var value = new proto.skylark_debugging.EvaluateRequest;
                reader.readMessage(value, proto.skylark_debugging.EvaluateRequest.deserializeBinaryFromReader);
                msg.setEvaluate(value);
                break;
            case 104:
                var value = new proto.skylark_debugging.ListFramesRequest;
                reader.readMessage(value, proto.skylark_debugging.ListFramesRequest.deserializeBinaryFromReader);
                msg.setListFrames(value);
                break;
            case 105:
                var value = new proto.skylark_debugging.StartDebuggingRequest;
                reader.readMessage(value, proto.skylark_debugging.StartDebuggingRequest.deserializeBinaryFromReader);
                msg.setStartDebugging(value);
                break;
            case 106:
                var value = new proto.skylark_debugging.PauseThreadRequest;
                reader.readMessage(value, proto.skylark_debugging.PauseThreadRequest.deserializeBinaryFromReader);
                msg.setPauseThread(value);
                break;
            case 107:
                var value = new proto.skylark_debugging.GetChildrenRequest;
                reader.readMessage(value, proto.skylark_debugging.GetChildrenRequest.deserializeBinaryFromReader);
                msg.setGetChildren(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.DebugRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.DebugRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.DebugRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.DebugRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSequenceNumber();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getSetBreakpoints();
    if (f != null) {
        writer.writeMessage(101, f, proto.skylark_debugging.SetBreakpointsRequest.serializeBinaryToWriter);
    }
    f = message.getContinueExecution();
    if (f != null) {
        writer.writeMessage(102, f, proto.skylark_debugging.ContinueExecutionRequest.serializeBinaryToWriter);
    }
    f = message.getEvaluate();
    if (f != null) {
        writer.writeMessage(103, f, proto.skylark_debugging.EvaluateRequest.serializeBinaryToWriter);
    }
    f = message.getListFrames();
    if (f != null) {
        writer.writeMessage(104, f, proto.skylark_debugging.ListFramesRequest.serializeBinaryToWriter);
    }
    f = message.getStartDebugging();
    if (f != null) {
        writer.writeMessage(105, f, proto.skylark_debugging.StartDebuggingRequest.serializeBinaryToWriter);
    }
    f = message.getPauseThread();
    if (f != null) {
        writer.writeMessage(106, f, proto.skylark_debugging.PauseThreadRequest.serializeBinaryToWriter);
    }
    f = message.getGetChildren();
    if (f != null) {
        writer.writeMessage(107, f, proto.skylark_debugging.GetChildrenRequest.serializeBinaryToWriter);
    }
};
/**
 * optional int64 sequence_number = 1;
 * @return {number}
 */
proto.skylark_debugging.DebugRequest.prototype.getSequenceNumber = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {number} value */
proto.skylark_debugging.DebugRequest.prototype.setSequenceNumber = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional SetBreakpointsRequest set_breakpoints = 101;
 * @return {?proto.skylark_debugging.SetBreakpointsRequest}
 */
proto.skylark_debugging.DebugRequest.prototype.getSetBreakpoints = function () {
    return /** @type{?proto.skylark_debugging.SetBreakpointsRequest} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.SetBreakpointsRequest, 101));
};
/** @param {?proto.skylark_debugging.SetBreakpointsRequest|undefined} value */
proto.skylark_debugging.DebugRequest.prototype.setSetBreakpoints = function (value) {
    jspb.Message.setOneofWrapperField(this, 101, proto.skylark_debugging.DebugRequest.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugRequest.prototype.clearSetBreakpoints = function () {
    this.setSetBreakpoints(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugRequest.prototype.hasSetBreakpoints = function () {
    return jspb.Message.getField(this, 101) != null;
};
/**
 * optional ContinueExecutionRequest continue_execution = 102;
 * @return {?proto.skylark_debugging.ContinueExecutionRequest}
 */
proto.skylark_debugging.DebugRequest.prototype.getContinueExecution = function () {
    return /** @type{?proto.skylark_debugging.ContinueExecutionRequest} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.ContinueExecutionRequest, 102));
};
/** @param {?proto.skylark_debugging.ContinueExecutionRequest|undefined} value */
proto.skylark_debugging.DebugRequest.prototype.setContinueExecution = function (value) {
    jspb.Message.setOneofWrapperField(this, 102, proto.skylark_debugging.DebugRequest.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugRequest.prototype.clearContinueExecution = function () {
    this.setContinueExecution(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugRequest.prototype.hasContinueExecution = function () {
    return jspb.Message.getField(this, 102) != null;
};
/**
 * optional EvaluateRequest evaluate = 103;
 * @return {?proto.skylark_debugging.EvaluateRequest}
 */
proto.skylark_debugging.DebugRequest.prototype.getEvaluate = function () {
    return /** @type{?proto.skylark_debugging.EvaluateRequest} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.EvaluateRequest, 103));
};
/** @param {?proto.skylark_debugging.EvaluateRequest|undefined} value */
proto.skylark_debugging.DebugRequest.prototype.setEvaluate = function (value) {
    jspb.Message.setOneofWrapperField(this, 103, proto.skylark_debugging.DebugRequest.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugRequest.prototype.clearEvaluate = function () {
    this.setEvaluate(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugRequest.prototype.hasEvaluate = function () {
    return jspb.Message.getField(this, 103) != null;
};
/**
 * optional ListFramesRequest list_frames = 104;
 * @return {?proto.skylark_debugging.ListFramesRequest}
 */
proto.skylark_debugging.DebugRequest.prototype.getListFrames = function () {
    return /** @type{?proto.skylark_debugging.ListFramesRequest} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.ListFramesRequest, 104));
};
/** @param {?proto.skylark_debugging.ListFramesRequest|undefined} value */
proto.skylark_debugging.DebugRequest.prototype.setListFrames = function (value) {
    jspb.Message.setOneofWrapperField(this, 104, proto.skylark_debugging.DebugRequest.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugRequest.prototype.clearListFrames = function () {
    this.setListFrames(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugRequest.prototype.hasListFrames = function () {
    return jspb.Message.getField(this, 104) != null;
};
/**
 * optional StartDebuggingRequest start_debugging = 105;
 * @return {?proto.skylark_debugging.StartDebuggingRequest}
 */
proto.skylark_debugging.DebugRequest.prototype.getStartDebugging = function () {
    return /** @type{?proto.skylark_debugging.StartDebuggingRequest} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.StartDebuggingRequest, 105));
};
/** @param {?proto.skylark_debugging.StartDebuggingRequest|undefined} value */
proto.skylark_debugging.DebugRequest.prototype.setStartDebugging = function (value) {
    jspb.Message.setOneofWrapperField(this, 105, proto.skylark_debugging.DebugRequest.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugRequest.prototype.clearStartDebugging = function () {
    this.setStartDebugging(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugRequest.prototype.hasStartDebugging = function () {
    return jspb.Message.getField(this, 105) != null;
};
/**
 * optional PauseThreadRequest pause_thread = 106;
 * @return {?proto.skylark_debugging.PauseThreadRequest}
 */
proto.skylark_debugging.DebugRequest.prototype.getPauseThread = function () {
    return /** @type{?proto.skylark_debugging.PauseThreadRequest} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.PauseThreadRequest, 106));
};
/** @param {?proto.skylark_debugging.PauseThreadRequest|undefined} value */
proto.skylark_debugging.DebugRequest.prototype.setPauseThread = function (value) {
    jspb.Message.setOneofWrapperField(this, 106, proto.skylark_debugging.DebugRequest.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugRequest.prototype.clearPauseThread = function () {
    this.setPauseThread(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugRequest.prototype.hasPauseThread = function () {
    return jspb.Message.getField(this, 106) != null;
};
/**
 * optional GetChildrenRequest get_children = 107;
 * @return {?proto.skylark_debugging.GetChildrenRequest}
 */
proto.skylark_debugging.DebugRequest.prototype.getGetChildren = function () {
    return /** @type{?proto.skylark_debugging.GetChildrenRequest} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.GetChildrenRequest, 107));
};
/** @param {?proto.skylark_debugging.GetChildrenRequest|undefined} value */
proto.skylark_debugging.DebugRequest.prototype.setGetChildren = function (value) {
    jspb.Message.setOneofWrapperField(this, 107, proto.skylark_debugging.DebugRequest.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugRequest.prototype.clearGetChildren = function () {
    this.setGetChildren(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugRequest.prototype.hasGetChildren = function () {
    return jspb.Message.getField(this, 107) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.SetBreakpointsRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.skylark_debugging.SetBreakpointsRequest.repeatedFields_, null);
};
goog.inherits(proto.skylark_debugging.SetBreakpointsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.SetBreakpointsRequest.displayName = 'proto.skylark_debugging.SetBreakpointsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skylark_debugging.SetBreakpointsRequest.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.SetBreakpointsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.SetBreakpointsRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.SetBreakpointsRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.SetBreakpointsRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            breakpointList: jspb.Message.toObjectList(msg.getBreakpointList(), proto.skylark_debugging.Breakpoint.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.SetBreakpointsRequest}
 */
proto.skylark_debugging.SetBreakpointsRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.SetBreakpointsRequest;
    return proto.skylark_debugging.SetBreakpointsRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.SetBreakpointsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.SetBreakpointsRequest}
 */
proto.skylark_debugging.SetBreakpointsRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.skylark_debugging.Breakpoint;
                reader.readMessage(value, proto.skylark_debugging.Breakpoint.deserializeBinaryFromReader);
                msg.addBreakpoint(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.SetBreakpointsRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.SetBreakpointsRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.SetBreakpointsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.SetBreakpointsRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBreakpointList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.skylark_debugging.Breakpoint.serializeBinaryToWriter);
    }
};
/**
 * repeated Breakpoint breakpoint = 1;
 * @return {!Array.<!proto.skylark_debugging.Breakpoint>}
 */
proto.skylark_debugging.SetBreakpointsRequest.prototype.getBreakpointList = function () {
    return /** @type{!Array.<!proto.skylark_debugging.Breakpoint>} */ (jspb.Message.getRepeatedWrapperField(this, proto.skylark_debugging.Breakpoint, 1));
};
/** @param {!Array.<!proto.skylark_debugging.Breakpoint>} value */
proto.skylark_debugging.SetBreakpointsRequest.prototype.setBreakpointList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.skylark_debugging.Breakpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skylark_debugging.Breakpoint}
 */
proto.skylark_debugging.SetBreakpointsRequest.prototype.addBreakpoint = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.skylark_debugging.Breakpoint, opt_index);
};
proto.skylark_debugging.SetBreakpointsRequest.prototype.clearBreakpointList = function () {
    this.setBreakpointList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.ContinueExecutionRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.ContinueExecutionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.ContinueExecutionRequest.displayName = 'proto.skylark_debugging.ContinueExecutionRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.ContinueExecutionRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.ContinueExecutionRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.ContinueExecutionRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.ContinueExecutionRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            stepping: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.ContinueExecutionRequest}
 */
proto.skylark_debugging.ContinueExecutionRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.ContinueExecutionRequest;
    return proto.skylark_debugging.ContinueExecutionRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.ContinueExecutionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.ContinueExecutionRequest}
 */
proto.skylark_debugging.ContinueExecutionRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setThreadId(value);
                break;
            case 2:
                var value = /** @type {!proto.skylark_debugging.Stepping} */ (reader.readEnum());
                msg.setStepping(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.ContinueExecutionRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.ContinueExecutionRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.ContinueExecutionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.ContinueExecutionRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadId();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getStepping();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
};
/**
 * optional int64 thread_id = 1;
 * @return {number}
 */
proto.skylark_debugging.ContinueExecutionRequest.prototype.getThreadId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {number} value */
proto.skylark_debugging.ContinueExecutionRequest.prototype.setThreadId = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional Stepping stepping = 2;
 * @return {!proto.skylark_debugging.Stepping}
 */
proto.skylark_debugging.ContinueExecutionRequest.prototype.getStepping = function () {
    return /** @type {!proto.skylark_debugging.Stepping} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {!proto.skylark_debugging.Stepping} value */
proto.skylark_debugging.ContinueExecutionRequest.prototype.setStepping = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.EvaluateRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.EvaluateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.EvaluateRequest.displayName = 'proto.skylark_debugging.EvaluateRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.EvaluateRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.EvaluateRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.EvaluateRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.EvaluateRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            statement: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.EvaluateRequest}
 */
proto.skylark_debugging.EvaluateRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.EvaluateRequest;
    return proto.skylark_debugging.EvaluateRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.EvaluateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.EvaluateRequest}
 */
proto.skylark_debugging.EvaluateRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setThreadId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setStatement(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.EvaluateRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.EvaluateRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.EvaluateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.EvaluateRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadId();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getStatement();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional int64 thread_id = 1;
 * @return {number}
 */
proto.skylark_debugging.EvaluateRequest.prototype.getThreadId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {number} value */
proto.skylark_debugging.EvaluateRequest.prototype.setThreadId = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional string statement = 2;
 * @return {string}
 */
proto.skylark_debugging.EvaluateRequest.prototype.getStatement = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.skylark_debugging.EvaluateRequest.prototype.setStatement = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.ListFramesRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.ListFramesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.ListFramesRequest.displayName = 'proto.skylark_debugging.ListFramesRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.ListFramesRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.ListFramesRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.ListFramesRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.ListFramesRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadId: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.ListFramesRequest}
 */
proto.skylark_debugging.ListFramesRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.ListFramesRequest;
    return proto.skylark_debugging.ListFramesRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.ListFramesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.ListFramesRequest}
 */
proto.skylark_debugging.ListFramesRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setThreadId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.ListFramesRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.ListFramesRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.ListFramesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.ListFramesRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadId();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
};
/**
 * optional int64 thread_id = 1;
 * @return {number}
 */
proto.skylark_debugging.ListFramesRequest.prototype.getThreadId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {number} value */
proto.skylark_debugging.ListFramesRequest.prototype.setThreadId = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.StartDebuggingRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.StartDebuggingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.StartDebuggingRequest.displayName = 'proto.skylark_debugging.StartDebuggingRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.StartDebuggingRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.StartDebuggingRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.StartDebuggingRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.StartDebuggingRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.StartDebuggingRequest}
 */
proto.skylark_debugging.StartDebuggingRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.StartDebuggingRequest;
    return proto.skylark_debugging.StartDebuggingRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.StartDebuggingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.StartDebuggingRequest}
 */
proto.skylark_debugging.StartDebuggingRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.StartDebuggingRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.StartDebuggingRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.StartDebuggingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.StartDebuggingRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.PauseThreadRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.PauseThreadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.PauseThreadRequest.displayName = 'proto.skylark_debugging.PauseThreadRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.PauseThreadRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.PauseThreadRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.PauseThreadRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.PauseThreadRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadId: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.PauseThreadRequest}
 */
proto.skylark_debugging.PauseThreadRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.PauseThreadRequest;
    return proto.skylark_debugging.PauseThreadRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.PauseThreadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.PauseThreadRequest}
 */
proto.skylark_debugging.PauseThreadRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setThreadId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.PauseThreadRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.PauseThreadRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.PauseThreadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.PauseThreadRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadId();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
};
/**
 * optional int64 thread_id = 1;
 * @return {number}
 */
proto.skylark_debugging.PauseThreadRequest.prototype.getThreadId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {number} value */
proto.skylark_debugging.PauseThreadRequest.prototype.setThreadId = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.GetChildrenRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.GetChildrenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.GetChildrenRequest.displayName = 'proto.skylark_debugging.GetChildrenRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.GetChildrenRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.GetChildrenRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.GetChildrenRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.GetChildrenRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            valueId: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.GetChildrenRequest}
 */
proto.skylark_debugging.GetChildrenRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.GetChildrenRequest;
    return proto.skylark_debugging.GetChildrenRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.GetChildrenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.GetChildrenRequest}
 */
proto.skylark_debugging.GetChildrenRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setThreadId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setValueId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.GetChildrenRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.GetChildrenRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.GetChildrenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.GetChildrenRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadId();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getValueId();
    if (f !== 0) {
        writer.writeInt64(2, f);
    }
};
/**
 * optional int64 thread_id = 1;
 * @return {number}
 */
proto.skylark_debugging.GetChildrenRequest.prototype.getThreadId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {number} value */
proto.skylark_debugging.GetChildrenRequest.prototype.setThreadId = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional int64 value_id = 2;
 * @return {number}
 */
proto.skylark_debugging.GetChildrenRequest.prototype.getValueId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {number} value */
proto.skylark_debugging.GetChildrenRequest.prototype.setValueId = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.DebugEvent = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, 500, null, proto.skylark_debugging.DebugEvent.oneofGroups_);
};
goog.inherits(proto.skylark_debugging.DebugEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.DebugEvent.displayName = 'proto.skylark_debugging.DebugEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.skylark_debugging.DebugEvent.oneofGroups_ = [[99, 101, 102, 103, 104, 105, 106, 107, 1001, 1002]];
/**
 * @enum {number}
 */
proto.skylark_debugging.DebugEvent.PayloadCase = {
    PAYLOAD_NOT_SET: 0,
    ERROR: 99,
    SET_BREAKPOINTS: 101,
    CONTINUE_EXECUTION: 102,
    EVALUATE: 103,
    LIST_FRAMES: 104,
    START_DEBUGGING: 105,
    PAUSE_THREAD: 106,
    GET_CHILDREN: 107,
    THREAD_PAUSED: 1001,
    THREAD_CONTINUED: 1002
};
/**
 * @return {proto.skylark_debugging.DebugEvent.PayloadCase}
 */
proto.skylark_debugging.DebugEvent.prototype.getPayloadCase = function () {
    return /** @type {proto.skylark_debugging.DebugEvent.PayloadCase} */ (jspb.Message.computeOneofCase(this, proto.skylark_debugging.DebugEvent.oneofGroups_[0]));
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.DebugEvent.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.DebugEvent.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.DebugEvent} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.DebugEvent.toObject = function (includeInstance, msg) {
        var f, obj = {
            sequenceNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
            error: (f = msg.getError()) && proto.skylark_debugging.Error.toObject(includeInstance, f),
            setBreakpoints: (f = msg.getSetBreakpoints()) && proto.skylark_debugging.SetBreakpointsResponse.toObject(includeInstance, f),
            continueExecution: (f = msg.getContinueExecution()) && proto.skylark_debugging.ContinueExecutionResponse.toObject(includeInstance, f),
            evaluate: (f = msg.getEvaluate()) && proto.skylark_debugging.EvaluateResponse.toObject(includeInstance, f),
            listFrames: (f = msg.getListFrames()) && proto.skylark_debugging.ListFramesResponse.toObject(includeInstance, f),
            startDebugging: (f = msg.getStartDebugging()) && proto.skylark_debugging.StartDebuggingResponse.toObject(includeInstance, f),
            pauseThread: (f = msg.getPauseThread()) && proto.skylark_debugging.PauseThreadResponse.toObject(includeInstance, f),
            getChildren: (f = msg.getGetChildren()) && proto.skylark_debugging.GetChildrenResponse.toObject(includeInstance, f),
            threadPaused: (f = msg.getThreadPaused()) && proto.skylark_debugging.ThreadPausedEvent.toObject(includeInstance, f),
            threadContinued: (f = msg.getThreadContinued()) && proto.skylark_debugging.ThreadContinuedEvent.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.DebugEvent}
 */
proto.skylark_debugging.DebugEvent.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.DebugEvent;
    return proto.skylark_debugging.DebugEvent.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.DebugEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.DebugEvent}
 */
proto.skylark_debugging.DebugEvent.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setSequenceNumber(value);
                break;
            case 99:
                var value = new proto.skylark_debugging.Error;
                reader.readMessage(value, proto.skylark_debugging.Error.deserializeBinaryFromReader);
                msg.setError(value);
                break;
            case 101:
                var value = new proto.skylark_debugging.SetBreakpointsResponse;
                reader.readMessage(value, proto.skylark_debugging.SetBreakpointsResponse.deserializeBinaryFromReader);
                msg.setSetBreakpoints(value);
                break;
            case 102:
                var value = new proto.skylark_debugging.ContinueExecutionResponse;
                reader.readMessage(value, proto.skylark_debugging.ContinueExecutionResponse.deserializeBinaryFromReader);
                msg.setContinueExecution(value);
                break;
            case 103:
                var value = new proto.skylark_debugging.EvaluateResponse;
                reader.readMessage(value, proto.skylark_debugging.EvaluateResponse.deserializeBinaryFromReader);
                msg.setEvaluate(value);
                break;
            case 104:
                var value = new proto.skylark_debugging.ListFramesResponse;
                reader.readMessage(value, proto.skylark_debugging.ListFramesResponse.deserializeBinaryFromReader);
                msg.setListFrames(value);
                break;
            case 105:
                var value = new proto.skylark_debugging.StartDebuggingResponse;
                reader.readMessage(value, proto.skylark_debugging.StartDebuggingResponse.deserializeBinaryFromReader);
                msg.setStartDebugging(value);
                break;
            case 106:
                var value = new proto.skylark_debugging.PauseThreadResponse;
                reader.readMessage(value, proto.skylark_debugging.PauseThreadResponse.deserializeBinaryFromReader);
                msg.setPauseThread(value);
                break;
            case 107:
                var value = new proto.skylark_debugging.GetChildrenResponse;
                reader.readMessage(value, proto.skylark_debugging.GetChildrenResponse.deserializeBinaryFromReader);
                msg.setGetChildren(value);
                break;
            case 1001:
                var value = new proto.skylark_debugging.ThreadPausedEvent;
                reader.readMessage(value, proto.skylark_debugging.ThreadPausedEvent.deserializeBinaryFromReader);
                msg.setThreadPaused(value);
                break;
            case 1002:
                var value = new proto.skylark_debugging.ThreadContinuedEvent;
                reader.readMessage(value, proto.skylark_debugging.ThreadContinuedEvent.deserializeBinaryFromReader);
                msg.setThreadContinued(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.DebugEvent.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.DebugEvent.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.DebugEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.DebugEvent.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSequenceNumber();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getError();
    if (f != null) {
        writer.writeMessage(99, f, proto.skylark_debugging.Error.serializeBinaryToWriter);
    }
    f = message.getSetBreakpoints();
    if (f != null) {
        writer.writeMessage(101, f, proto.skylark_debugging.SetBreakpointsResponse.serializeBinaryToWriter);
    }
    f = message.getContinueExecution();
    if (f != null) {
        writer.writeMessage(102, f, proto.skylark_debugging.ContinueExecutionResponse.serializeBinaryToWriter);
    }
    f = message.getEvaluate();
    if (f != null) {
        writer.writeMessage(103, f, proto.skylark_debugging.EvaluateResponse.serializeBinaryToWriter);
    }
    f = message.getListFrames();
    if (f != null) {
        writer.writeMessage(104, f, proto.skylark_debugging.ListFramesResponse.serializeBinaryToWriter);
    }
    f = message.getStartDebugging();
    if (f != null) {
        writer.writeMessage(105, f, proto.skylark_debugging.StartDebuggingResponse.serializeBinaryToWriter);
    }
    f = message.getPauseThread();
    if (f != null) {
        writer.writeMessage(106, f, proto.skylark_debugging.PauseThreadResponse.serializeBinaryToWriter);
    }
    f = message.getGetChildren();
    if (f != null) {
        writer.writeMessage(107, f, proto.skylark_debugging.GetChildrenResponse.serializeBinaryToWriter);
    }
    f = message.getThreadPaused();
    if (f != null) {
        writer.writeMessage(1001, f, proto.skylark_debugging.ThreadPausedEvent.serializeBinaryToWriter);
    }
    f = message.getThreadContinued();
    if (f != null) {
        writer.writeMessage(1002, f, proto.skylark_debugging.ThreadContinuedEvent.serializeBinaryToWriter);
    }
};
/**
 * optional int64 sequence_number = 1;
 * @return {number}
 */
proto.skylark_debugging.DebugEvent.prototype.getSequenceNumber = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {number} value */
proto.skylark_debugging.DebugEvent.prototype.setSequenceNumber = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional Error error = 99;
 * @return {?proto.skylark_debugging.Error}
 */
proto.skylark_debugging.DebugEvent.prototype.getError = function () {
    return /** @type{?proto.skylark_debugging.Error} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.Error, 99));
};
/** @param {?proto.skylark_debugging.Error|undefined} value */
proto.skylark_debugging.DebugEvent.prototype.setError = function (value) {
    jspb.Message.setOneofWrapperField(this, 99, proto.skylark_debugging.DebugEvent.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugEvent.prototype.clearError = function () {
    this.setError(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugEvent.prototype.hasError = function () {
    return jspb.Message.getField(this, 99) != null;
};
/**
 * optional SetBreakpointsResponse set_breakpoints = 101;
 * @return {?proto.skylark_debugging.SetBreakpointsResponse}
 */
proto.skylark_debugging.DebugEvent.prototype.getSetBreakpoints = function () {
    return /** @type{?proto.skylark_debugging.SetBreakpointsResponse} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.SetBreakpointsResponse, 101));
};
/** @param {?proto.skylark_debugging.SetBreakpointsResponse|undefined} value */
proto.skylark_debugging.DebugEvent.prototype.setSetBreakpoints = function (value) {
    jspb.Message.setOneofWrapperField(this, 101, proto.skylark_debugging.DebugEvent.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugEvent.prototype.clearSetBreakpoints = function () {
    this.setSetBreakpoints(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugEvent.prototype.hasSetBreakpoints = function () {
    return jspb.Message.getField(this, 101) != null;
};
/**
 * optional ContinueExecutionResponse continue_execution = 102;
 * @return {?proto.skylark_debugging.ContinueExecutionResponse}
 */
proto.skylark_debugging.DebugEvent.prototype.getContinueExecution = function () {
    return /** @type{?proto.skylark_debugging.ContinueExecutionResponse} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.ContinueExecutionResponse, 102));
};
/** @param {?proto.skylark_debugging.ContinueExecutionResponse|undefined} value */
proto.skylark_debugging.DebugEvent.prototype.setContinueExecution = function (value) {
    jspb.Message.setOneofWrapperField(this, 102, proto.skylark_debugging.DebugEvent.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugEvent.prototype.clearContinueExecution = function () {
    this.setContinueExecution(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugEvent.prototype.hasContinueExecution = function () {
    return jspb.Message.getField(this, 102) != null;
};
/**
 * optional EvaluateResponse evaluate = 103;
 * @return {?proto.skylark_debugging.EvaluateResponse}
 */
proto.skylark_debugging.DebugEvent.prototype.getEvaluate = function () {
    return /** @type{?proto.skylark_debugging.EvaluateResponse} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.EvaluateResponse, 103));
};
/** @param {?proto.skylark_debugging.EvaluateResponse|undefined} value */
proto.skylark_debugging.DebugEvent.prototype.setEvaluate = function (value) {
    jspb.Message.setOneofWrapperField(this, 103, proto.skylark_debugging.DebugEvent.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugEvent.prototype.clearEvaluate = function () {
    this.setEvaluate(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugEvent.prototype.hasEvaluate = function () {
    return jspb.Message.getField(this, 103) != null;
};
/**
 * optional ListFramesResponse list_frames = 104;
 * @return {?proto.skylark_debugging.ListFramesResponse}
 */
proto.skylark_debugging.DebugEvent.prototype.getListFrames = function () {
    return /** @type{?proto.skylark_debugging.ListFramesResponse} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.ListFramesResponse, 104));
};
/** @param {?proto.skylark_debugging.ListFramesResponse|undefined} value */
proto.skylark_debugging.DebugEvent.prototype.setListFrames = function (value) {
    jspb.Message.setOneofWrapperField(this, 104, proto.skylark_debugging.DebugEvent.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugEvent.prototype.clearListFrames = function () {
    this.setListFrames(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugEvent.prototype.hasListFrames = function () {
    return jspb.Message.getField(this, 104) != null;
};
/**
 * optional StartDebuggingResponse start_debugging = 105;
 * @return {?proto.skylark_debugging.StartDebuggingResponse}
 */
proto.skylark_debugging.DebugEvent.prototype.getStartDebugging = function () {
    return /** @type{?proto.skylark_debugging.StartDebuggingResponse} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.StartDebuggingResponse, 105));
};
/** @param {?proto.skylark_debugging.StartDebuggingResponse|undefined} value */
proto.skylark_debugging.DebugEvent.prototype.setStartDebugging = function (value) {
    jspb.Message.setOneofWrapperField(this, 105, proto.skylark_debugging.DebugEvent.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugEvent.prototype.clearStartDebugging = function () {
    this.setStartDebugging(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugEvent.prototype.hasStartDebugging = function () {
    return jspb.Message.getField(this, 105) != null;
};
/**
 * optional PauseThreadResponse pause_thread = 106;
 * @return {?proto.skylark_debugging.PauseThreadResponse}
 */
proto.skylark_debugging.DebugEvent.prototype.getPauseThread = function () {
    return /** @type{?proto.skylark_debugging.PauseThreadResponse} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.PauseThreadResponse, 106));
};
/** @param {?proto.skylark_debugging.PauseThreadResponse|undefined} value */
proto.skylark_debugging.DebugEvent.prototype.setPauseThread = function (value) {
    jspb.Message.setOneofWrapperField(this, 106, proto.skylark_debugging.DebugEvent.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugEvent.prototype.clearPauseThread = function () {
    this.setPauseThread(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugEvent.prototype.hasPauseThread = function () {
    return jspb.Message.getField(this, 106) != null;
};
/**
 * optional GetChildrenResponse get_children = 107;
 * @return {?proto.skylark_debugging.GetChildrenResponse}
 */
proto.skylark_debugging.DebugEvent.prototype.getGetChildren = function () {
    return /** @type{?proto.skylark_debugging.GetChildrenResponse} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.GetChildrenResponse, 107));
};
/** @param {?proto.skylark_debugging.GetChildrenResponse|undefined} value */
proto.skylark_debugging.DebugEvent.prototype.setGetChildren = function (value) {
    jspb.Message.setOneofWrapperField(this, 107, proto.skylark_debugging.DebugEvent.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugEvent.prototype.clearGetChildren = function () {
    this.setGetChildren(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugEvent.prototype.hasGetChildren = function () {
    return jspb.Message.getField(this, 107) != null;
};
/**
 * optional ThreadPausedEvent thread_paused = 1001;
 * @return {?proto.skylark_debugging.ThreadPausedEvent}
 */
proto.skylark_debugging.DebugEvent.prototype.getThreadPaused = function () {
    return /** @type{?proto.skylark_debugging.ThreadPausedEvent} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.ThreadPausedEvent, 1001));
};
/** @param {?proto.skylark_debugging.ThreadPausedEvent|undefined} value */
proto.skylark_debugging.DebugEvent.prototype.setThreadPaused = function (value) {
    jspb.Message.setOneofWrapperField(this, 1001, proto.skylark_debugging.DebugEvent.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugEvent.prototype.clearThreadPaused = function () {
    this.setThreadPaused(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugEvent.prototype.hasThreadPaused = function () {
    return jspb.Message.getField(this, 1001) != null;
};
/**
 * optional ThreadContinuedEvent thread_continued = 1002;
 * @return {?proto.skylark_debugging.ThreadContinuedEvent}
 */
proto.skylark_debugging.DebugEvent.prototype.getThreadContinued = function () {
    return /** @type{?proto.skylark_debugging.ThreadContinuedEvent} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.ThreadContinuedEvent, 1002));
};
/** @param {?proto.skylark_debugging.ThreadContinuedEvent|undefined} value */
proto.skylark_debugging.DebugEvent.prototype.setThreadContinued = function (value) {
    jspb.Message.setOneofWrapperField(this, 1002, proto.skylark_debugging.DebugEvent.oneofGroups_[0], value);
};
proto.skylark_debugging.DebugEvent.prototype.clearThreadContinued = function () {
    this.setThreadContinued(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.DebugEvent.prototype.hasThreadContinued = function () {
    return jspb.Message.getField(this, 1002) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.Error = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.Error.displayName = 'proto.skylark_debugging.Error';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.Error.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.Error.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.Error} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.Error.toObject = function (includeInstance, msg) {
        var f, obj = {
            message: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.Error}
 */
proto.skylark_debugging.Error.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.Error;
    return proto.skylark_debugging.Error.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.Error}
 */
proto.skylark_debugging.Error.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setMessage(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.Error.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.Error.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.Error.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMessage();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string message = 1;
 * @return {string}
 */
proto.skylark_debugging.Error.prototype.getMessage = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.skylark_debugging.Error.prototype.setMessage = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.SetBreakpointsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.SetBreakpointsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.SetBreakpointsResponse.displayName = 'proto.skylark_debugging.SetBreakpointsResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.SetBreakpointsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.SetBreakpointsResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.SetBreakpointsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.SetBreakpointsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.SetBreakpointsResponse}
 */
proto.skylark_debugging.SetBreakpointsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.SetBreakpointsResponse;
    return proto.skylark_debugging.SetBreakpointsResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.SetBreakpointsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.SetBreakpointsResponse}
 */
proto.skylark_debugging.SetBreakpointsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.SetBreakpointsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.SetBreakpointsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.SetBreakpointsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.SetBreakpointsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.ContinueExecutionResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.ContinueExecutionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.ContinueExecutionResponse.displayName = 'proto.skylark_debugging.ContinueExecutionResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.ContinueExecutionResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.ContinueExecutionResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.ContinueExecutionResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.ContinueExecutionResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.ContinueExecutionResponse}
 */
proto.skylark_debugging.ContinueExecutionResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.ContinueExecutionResponse;
    return proto.skylark_debugging.ContinueExecutionResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.ContinueExecutionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.ContinueExecutionResponse}
 */
proto.skylark_debugging.ContinueExecutionResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.ContinueExecutionResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.ContinueExecutionResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.ContinueExecutionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.ContinueExecutionResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.EvaluateResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.EvaluateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.EvaluateResponse.displayName = 'proto.skylark_debugging.EvaluateResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.EvaluateResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.EvaluateResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.EvaluateResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.EvaluateResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            result: (f = msg.getResult()) && proto.skylark_debugging.Value.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.EvaluateResponse}
 */
proto.skylark_debugging.EvaluateResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.EvaluateResponse;
    return proto.skylark_debugging.EvaluateResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.EvaluateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.EvaluateResponse}
 */
proto.skylark_debugging.EvaluateResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.skylark_debugging.Value;
                reader.readMessage(value, proto.skylark_debugging.Value.deserializeBinaryFromReader);
                msg.setResult(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.EvaluateResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.EvaluateResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.EvaluateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.EvaluateResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResult();
    if (f != null) {
        writer.writeMessage(1, f, proto.skylark_debugging.Value.serializeBinaryToWriter);
    }
};
/**
 * optional Value result = 1;
 * @return {?proto.skylark_debugging.Value}
 */
proto.skylark_debugging.EvaluateResponse.prototype.getResult = function () {
    return /** @type{?proto.skylark_debugging.Value} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.Value, 1));
};
/** @param {?proto.skylark_debugging.Value|undefined} value */
proto.skylark_debugging.EvaluateResponse.prototype.setResult = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
proto.skylark_debugging.EvaluateResponse.prototype.clearResult = function () {
    this.setResult(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.EvaluateResponse.prototype.hasResult = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.ListFramesResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.skylark_debugging.ListFramesResponse.repeatedFields_, null);
};
goog.inherits(proto.skylark_debugging.ListFramesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.ListFramesResponse.displayName = 'proto.skylark_debugging.ListFramesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skylark_debugging.ListFramesResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.ListFramesResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.ListFramesResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.ListFramesResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.ListFramesResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            frameList: jspb.Message.toObjectList(msg.getFrameList(), proto.skylark_debugging.Frame.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.ListFramesResponse}
 */
proto.skylark_debugging.ListFramesResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.ListFramesResponse;
    return proto.skylark_debugging.ListFramesResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.ListFramesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.ListFramesResponse}
 */
proto.skylark_debugging.ListFramesResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.skylark_debugging.Frame;
                reader.readMessage(value, proto.skylark_debugging.Frame.deserializeBinaryFromReader);
                msg.addFrame(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.ListFramesResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.ListFramesResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.ListFramesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.ListFramesResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFrameList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.skylark_debugging.Frame.serializeBinaryToWriter);
    }
};
/**
 * repeated Frame frame = 1;
 * @return {!Array.<!proto.skylark_debugging.Frame>}
 */
proto.skylark_debugging.ListFramesResponse.prototype.getFrameList = function () {
    return /** @type{!Array.<!proto.skylark_debugging.Frame>} */ (jspb.Message.getRepeatedWrapperField(this, proto.skylark_debugging.Frame, 1));
};
/** @param {!Array.<!proto.skylark_debugging.Frame>} value */
proto.skylark_debugging.ListFramesResponse.prototype.setFrameList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.skylark_debugging.Frame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skylark_debugging.Frame}
 */
proto.skylark_debugging.ListFramesResponse.prototype.addFrame = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.skylark_debugging.Frame, opt_index);
};
proto.skylark_debugging.ListFramesResponse.prototype.clearFrameList = function () {
    this.setFrameList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.StartDebuggingResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.StartDebuggingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.StartDebuggingResponse.displayName = 'proto.skylark_debugging.StartDebuggingResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.StartDebuggingResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.StartDebuggingResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.StartDebuggingResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.StartDebuggingResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.StartDebuggingResponse}
 */
proto.skylark_debugging.StartDebuggingResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.StartDebuggingResponse;
    return proto.skylark_debugging.StartDebuggingResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.StartDebuggingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.StartDebuggingResponse}
 */
proto.skylark_debugging.StartDebuggingResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.StartDebuggingResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.StartDebuggingResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.StartDebuggingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.StartDebuggingResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.PauseThreadResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.PauseThreadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.PauseThreadResponse.displayName = 'proto.skylark_debugging.PauseThreadResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.PauseThreadResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.PauseThreadResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.PauseThreadResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.PauseThreadResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.PauseThreadResponse}
 */
proto.skylark_debugging.PauseThreadResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.PauseThreadResponse;
    return proto.skylark_debugging.PauseThreadResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.PauseThreadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.PauseThreadResponse}
 */
proto.skylark_debugging.PauseThreadResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.PauseThreadResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.PauseThreadResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.PauseThreadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.PauseThreadResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.GetChildrenResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.skylark_debugging.GetChildrenResponse.repeatedFields_, null);
};
goog.inherits(proto.skylark_debugging.GetChildrenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.GetChildrenResponse.displayName = 'proto.skylark_debugging.GetChildrenResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skylark_debugging.GetChildrenResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.GetChildrenResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.GetChildrenResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.GetChildrenResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.GetChildrenResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            childrenList: jspb.Message.toObjectList(msg.getChildrenList(), proto.skylark_debugging.Value.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.GetChildrenResponse}
 */
proto.skylark_debugging.GetChildrenResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.GetChildrenResponse;
    return proto.skylark_debugging.GetChildrenResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.GetChildrenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.GetChildrenResponse}
 */
proto.skylark_debugging.GetChildrenResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.skylark_debugging.Value;
                reader.readMessage(value, proto.skylark_debugging.Value.deserializeBinaryFromReader);
                msg.addChildren(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.GetChildrenResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.GetChildrenResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.GetChildrenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.GetChildrenResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getChildrenList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.skylark_debugging.Value.serializeBinaryToWriter);
    }
};
/**
 * repeated Value children = 1;
 * @return {!Array.<!proto.skylark_debugging.Value>}
 */
proto.skylark_debugging.GetChildrenResponse.prototype.getChildrenList = function () {
    return /** @type{!Array.<!proto.skylark_debugging.Value>} */ (jspb.Message.getRepeatedWrapperField(this, proto.skylark_debugging.Value, 1));
};
/** @param {!Array.<!proto.skylark_debugging.Value>} value */
proto.skylark_debugging.GetChildrenResponse.prototype.setChildrenList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.skylark_debugging.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skylark_debugging.Value}
 */
proto.skylark_debugging.GetChildrenResponse.prototype.addChildren = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.skylark_debugging.Value, opt_index);
};
proto.skylark_debugging.GetChildrenResponse.prototype.clearChildrenList = function () {
    this.setChildrenList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.ThreadPausedEvent = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.ThreadPausedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.ThreadPausedEvent.displayName = 'proto.skylark_debugging.ThreadPausedEvent';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.ThreadPausedEvent.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.ThreadPausedEvent.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.ThreadPausedEvent} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.ThreadPausedEvent.toObject = function (includeInstance, msg) {
        var f, obj = {
            thread: (f = msg.getThread()) && proto.skylark_debugging.PausedThread.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.ThreadPausedEvent}
 */
proto.skylark_debugging.ThreadPausedEvent.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.ThreadPausedEvent;
    return proto.skylark_debugging.ThreadPausedEvent.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.ThreadPausedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.ThreadPausedEvent}
 */
proto.skylark_debugging.ThreadPausedEvent.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.skylark_debugging.PausedThread;
                reader.readMessage(value, proto.skylark_debugging.PausedThread.deserializeBinaryFromReader);
                msg.setThread(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.ThreadPausedEvent.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.ThreadPausedEvent.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.ThreadPausedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.ThreadPausedEvent.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThread();
    if (f != null) {
        writer.writeMessage(1, f, proto.skylark_debugging.PausedThread.serializeBinaryToWriter);
    }
};
/**
 * optional PausedThread thread = 1;
 * @return {?proto.skylark_debugging.PausedThread}
 */
proto.skylark_debugging.ThreadPausedEvent.prototype.getThread = function () {
    return /** @type{?proto.skylark_debugging.PausedThread} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.PausedThread, 1));
};
/** @param {?proto.skylark_debugging.PausedThread|undefined} value */
proto.skylark_debugging.ThreadPausedEvent.prototype.setThread = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
proto.skylark_debugging.ThreadPausedEvent.prototype.clearThread = function () {
    this.setThread(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.ThreadPausedEvent.prototype.hasThread = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.ThreadContinuedEvent = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.ThreadContinuedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.ThreadContinuedEvent.displayName = 'proto.skylark_debugging.ThreadContinuedEvent';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.ThreadContinuedEvent.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.ThreadContinuedEvent.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.ThreadContinuedEvent} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.ThreadContinuedEvent.toObject = function (includeInstance, msg) {
        var f, obj = {
            threadId: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.ThreadContinuedEvent}
 */
proto.skylark_debugging.ThreadContinuedEvent.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.ThreadContinuedEvent;
    return proto.skylark_debugging.ThreadContinuedEvent.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.ThreadContinuedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.ThreadContinuedEvent}
 */
proto.skylark_debugging.ThreadContinuedEvent.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setThreadId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.ThreadContinuedEvent.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.ThreadContinuedEvent.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.ThreadContinuedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.ThreadContinuedEvent.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreadId();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
};
/**
 * optional int64 thread_id = 1;
 * @return {number}
 */
proto.skylark_debugging.ThreadContinuedEvent.prototype.getThreadId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {number} value */
proto.skylark_debugging.ThreadContinuedEvent.prototype.setThreadId = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.Breakpoint = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.skylark_debugging.Breakpoint.oneofGroups_);
};
goog.inherits(proto.skylark_debugging.Breakpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.Breakpoint.displayName = 'proto.skylark_debugging.Breakpoint';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.skylark_debugging.Breakpoint.oneofGroups_ = [[1]];
/**
 * @enum {number}
 */
proto.skylark_debugging.Breakpoint.ConditionCase = {
    CONDITION_NOT_SET: 0,
    LOCATION: 1
};
/**
 * @return {proto.skylark_debugging.Breakpoint.ConditionCase}
 */
proto.skylark_debugging.Breakpoint.prototype.getConditionCase = function () {
    return /** @type {proto.skylark_debugging.Breakpoint.ConditionCase} */ (jspb.Message.computeOneofCase(this, proto.skylark_debugging.Breakpoint.oneofGroups_[0]));
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.Breakpoint.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.Breakpoint.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.Breakpoint} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.Breakpoint.toObject = function (includeInstance, msg) {
        var f, obj = {
            location: (f = msg.getLocation()) && proto.skylark_debugging.Location.toObject(includeInstance, f),
            expression: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.Breakpoint}
 */
proto.skylark_debugging.Breakpoint.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.Breakpoint;
    return proto.skylark_debugging.Breakpoint.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.Breakpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.Breakpoint}
 */
proto.skylark_debugging.Breakpoint.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.skylark_debugging.Location;
                reader.readMessage(value, proto.skylark_debugging.Location.deserializeBinaryFromReader);
                msg.setLocation(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setExpression(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.Breakpoint.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.Breakpoint.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.Breakpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.Breakpoint.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLocation();
    if (f != null) {
        writer.writeMessage(1, f, proto.skylark_debugging.Location.serializeBinaryToWriter);
    }
    f = message.getExpression();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional Location location = 1;
 * @return {?proto.skylark_debugging.Location}
 */
proto.skylark_debugging.Breakpoint.prototype.getLocation = function () {
    return /** @type{?proto.skylark_debugging.Location} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.Location, 1));
};
/** @param {?proto.skylark_debugging.Location|undefined} value */
proto.skylark_debugging.Breakpoint.prototype.setLocation = function (value) {
    jspb.Message.setOneofWrapperField(this, 1, proto.skylark_debugging.Breakpoint.oneofGroups_[0], value);
};
proto.skylark_debugging.Breakpoint.prototype.clearLocation = function () {
    this.setLocation(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.Breakpoint.prototype.hasLocation = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string expression = 2;
 * @return {string}
 */
proto.skylark_debugging.Breakpoint.prototype.getExpression = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.skylark_debugging.Breakpoint.prototype.setExpression = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.Frame = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.skylark_debugging.Frame.repeatedFields_, null);
};
goog.inherits(proto.skylark_debugging.Frame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.Frame.displayName = 'proto.skylark_debugging.Frame';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skylark_debugging.Frame.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.Frame.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.Frame.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.Frame} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.Frame.toObject = function (includeInstance, msg) {
        var f, obj = {
            functionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            scopeList: jspb.Message.toObjectList(msg.getScopeList(), proto.skylark_debugging.Scope.toObject, includeInstance),
            location: (f = msg.getLocation()) && proto.skylark_debugging.Location.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.Frame}
 */
proto.skylark_debugging.Frame.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.Frame;
    return proto.skylark_debugging.Frame.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.Frame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.Frame}
 */
proto.skylark_debugging.Frame.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setFunctionName(value);
                break;
            case 2:
                var value = new proto.skylark_debugging.Scope;
                reader.readMessage(value, proto.skylark_debugging.Scope.deserializeBinaryFromReader);
                msg.addScope(value);
                break;
            case 3:
                var value = new proto.skylark_debugging.Location;
                reader.readMessage(value, proto.skylark_debugging.Location.deserializeBinaryFromReader);
                msg.setLocation(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.Frame.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.Frame.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.Frame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.Frame.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFunctionName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getScopeList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.skylark_debugging.Scope.serializeBinaryToWriter);
    }
    f = message.getLocation();
    if (f != null) {
        writer.writeMessage(3, f, proto.skylark_debugging.Location.serializeBinaryToWriter);
    }
};
/**
 * optional string function_name = 1;
 * @return {string}
 */
proto.skylark_debugging.Frame.prototype.getFunctionName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.skylark_debugging.Frame.prototype.setFunctionName = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * repeated Scope scope = 2;
 * @return {!Array.<!proto.skylark_debugging.Scope>}
 */
proto.skylark_debugging.Frame.prototype.getScopeList = function () {
    return /** @type{!Array.<!proto.skylark_debugging.Scope>} */ (jspb.Message.getRepeatedWrapperField(this, proto.skylark_debugging.Scope, 2));
};
/** @param {!Array.<!proto.skylark_debugging.Scope>} value */
proto.skylark_debugging.Frame.prototype.setScopeList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.skylark_debugging.Scope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skylark_debugging.Scope}
 */
proto.skylark_debugging.Frame.prototype.addScope = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.skylark_debugging.Scope, opt_index);
};
proto.skylark_debugging.Frame.prototype.clearScopeList = function () {
    this.setScopeList([]);
};
/**
 * optional Location location = 3;
 * @return {?proto.skylark_debugging.Location}
 */
proto.skylark_debugging.Frame.prototype.getLocation = function () {
    return /** @type{?proto.skylark_debugging.Location} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.Location, 3));
};
/** @param {?proto.skylark_debugging.Location|undefined} value */
proto.skylark_debugging.Frame.prototype.setLocation = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};
proto.skylark_debugging.Frame.prototype.clearLocation = function () {
    this.setLocation(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.Frame.prototype.hasLocation = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.Location = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.Location.displayName = 'proto.skylark_debugging.Location';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.Location.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.Location.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.Location} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.Location.toObject = function (includeInstance, msg) {
        var f, obj = {
            path: jspb.Message.getFieldWithDefault(msg, 1, ""),
            lineNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
            columnNumber: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.Location}
 */
proto.skylark_debugging.Location.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.Location;
    return proto.skylark_debugging.Location.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.Location}
 */
proto.skylark_debugging.Location.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPath(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setLineNumber(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setColumnNumber(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.Location.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.Location.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.Location.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPath();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getLineNumber();
    if (f !== 0) {
        writer.writeUint32(2, f);
    }
    f = message.getColumnNumber();
    if (f !== 0) {
        writer.writeUint32(3, f);
    }
};
/**
 * optional string path = 1;
 * @return {string}
 */
proto.skylark_debugging.Location.prototype.getPath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.skylark_debugging.Location.prototype.setPath = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional uint32 line_number = 2;
 * @return {number}
 */
proto.skylark_debugging.Location.prototype.getLineNumber = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {number} value */
proto.skylark_debugging.Location.prototype.setLineNumber = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * optional uint32 column_number = 3;
 * @return {number}
 */
proto.skylark_debugging.Location.prototype.getColumnNumber = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/** @param {number} value */
proto.skylark_debugging.Location.prototype.setColumnNumber = function (value) {
    jspb.Message.setField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.Scope = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.skylark_debugging.Scope.repeatedFields_, null);
};
goog.inherits(proto.skylark_debugging.Scope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.Scope.displayName = 'proto.skylark_debugging.Scope';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.skylark_debugging.Scope.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.Scope.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.Scope.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.Scope} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.Scope.toObject = function (includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            bindingList: jspb.Message.toObjectList(msg.getBindingList(), proto.skylark_debugging.Value.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.Scope}
 */
proto.skylark_debugging.Scope.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.Scope;
    return proto.skylark_debugging.Scope.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.Scope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.Scope}
 */
proto.skylark_debugging.Scope.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 2:
                var value = new proto.skylark_debugging.Value;
                reader.readMessage(value, proto.skylark_debugging.Value.deserializeBinaryFromReader);
                msg.addBinding(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.Scope.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.Scope.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.Scope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.Scope.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getBindingList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.skylark_debugging.Value.serializeBinaryToWriter);
    }
};
/**
 * optional string name = 1;
 * @return {string}
 */
proto.skylark_debugging.Scope.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.skylark_debugging.Scope.prototype.setName = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * repeated Value binding = 2;
 * @return {!Array.<!proto.skylark_debugging.Value>}
 */
proto.skylark_debugging.Scope.prototype.getBindingList = function () {
    return /** @type{!Array.<!proto.skylark_debugging.Value>} */ (jspb.Message.getRepeatedWrapperField(this, proto.skylark_debugging.Value, 2));
};
/** @param {!Array.<!proto.skylark_debugging.Value>} value */
proto.skylark_debugging.Scope.prototype.setBindingList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.skylark_debugging.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.skylark_debugging.Value}
 */
proto.skylark_debugging.Scope.prototype.addBinding = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.skylark_debugging.Value, opt_index);
};
proto.skylark_debugging.Scope.prototype.clearBindingList = function () {
    this.setBindingList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.PausedThread = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.PausedThread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.PausedThread.displayName = 'proto.skylark_debugging.PausedThread';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.PausedThread.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.PausedThread.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.PausedThread} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.PausedThread.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, 0),
            name: jspb.Message.getFieldWithDefault(msg, 2, ""),
            pauseReason: jspb.Message.getFieldWithDefault(msg, 3, 0),
            location: (f = msg.getLocation()) && proto.skylark_debugging.Location.toObject(includeInstance, f),
            conditionalBreakpointError: (f = msg.getConditionalBreakpointError()) && proto.skylark_debugging.Error.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.PausedThread}
 */
proto.skylark_debugging.PausedThread.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.PausedThread;
    return proto.skylark_debugging.PausedThread.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.PausedThread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.PausedThread}
 */
proto.skylark_debugging.PausedThread.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 3:
                var value = /** @type {!proto.skylark_debugging.PauseReason} */ (reader.readEnum());
                msg.setPauseReason(value);
                break;
            case 4:
                var value = new proto.skylark_debugging.Location;
                reader.readMessage(value, proto.skylark_debugging.Location.deserializeBinaryFromReader);
                msg.setLocation(value);
                break;
            case 5:
                var value = new proto.skylark_debugging.Error;
                reader.readMessage(value, proto.skylark_debugging.Error.deserializeBinaryFromReader);
                msg.setConditionalBreakpointError(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.PausedThread.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.PausedThread.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.PausedThread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.PausedThread.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getPauseReason();
    if (f !== 0.0) {
        writer.writeEnum(3, f);
    }
    f = message.getLocation();
    if (f != null) {
        writer.writeMessage(4, f, proto.skylark_debugging.Location.serializeBinaryToWriter);
    }
    f = message.getConditionalBreakpointError();
    if (f != null) {
        writer.writeMessage(5, f, proto.skylark_debugging.Error.serializeBinaryToWriter);
    }
};
/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.skylark_debugging.PausedThread.prototype.getId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {number} value */
proto.skylark_debugging.PausedThread.prototype.setId = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional string name = 2;
 * @return {string}
 */
proto.skylark_debugging.PausedThread.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.skylark_debugging.PausedThread.prototype.setName = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * optional PauseReason pause_reason = 3;
 * @return {!proto.skylark_debugging.PauseReason}
 */
proto.skylark_debugging.PausedThread.prototype.getPauseReason = function () {
    return /** @type {!proto.skylark_debugging.PauseReason} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/** @param {!proto.skylark_debugging.PauseReason} value */
proto.skylark_debugging.PausedThread.prototype.setPauseReason = function (value) {
    jspb.Message.setField(this, 3, value);
};
/**
 * optional Location location = 4;
 * @return {?proto.skylark_debugging.Location}
 */
proto.skylark_debugging.PausedThread.prototype.getLocation = function () {
    return /** @type{?proto.skylark_debugging.Location} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.Location, 4));
};
/** @param {?proto.skylark_debugging.Location|undefined} value */
proto.skylark_debugging.PausedThread.prototype.setLocation = function (value) {
    jspb.Message.setWrapperField(this, 4, value);
};
proto.skylark_debugging.PausedThread.prototype.clearLocation = function () {
    this.setLocation(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.PausedThread.prototype.hasLocation = function () {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional Error conditional_breakpoint_error = 5;
 * @return {?proto.skylark_debugging.Error}
 */
proto.skylark_debugging.PausedThread.prototype.getConditionalBreakpointError = function () {
    return /** @type{?proto.skylark_debugging.Error} */ (jspb.Message.getWrapperField(this, proto.skylark_debugging.Error, 5));
};
/** @param {?proto.skylark_debugging.Error|undefined} value */
proto.skylark_debugging.PausedThread.prototype.setConditionalBreakpointError = function (value) {
    jspb.Message.setWrapperField(this, 5, value);
};
proto.skylark_debugging.PausedThread.prototype.clearConditionalBreakpointError = function () {
    this.setConditionalBreakpointError(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.skylark_debugging.PausedThread.prototype.hasConditionalBreakpointError = function () {
    return jspb.Message.getField(this, 5) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.skylark_debugging.Value = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.skylark_debugging.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.skylark_debugging.Value.displayName = 'proto.skylark_debugging.Value';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.skylark_debugging.Value.prototype.toObject = function (opt_includeInstance) {
        return proto.skylark_debugging.Value.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.skylark_debugging.Value} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.skylark_debugging.Value.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            description: jspb.Message.getFieldWithDefault(msg, 2, ""),
            type: jspb.Message.getFieldWithDefault(msg, 3, ""),
            hasChildren: jspb.Message.getFieldWithDefault(msg, 4, false),
            id: jspb.Message.getFieldWithDefault(msg, 5, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.skylark_debugging.Value}
 */
proto.skylark_debugging.Value.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.skylark_debugging.Value;
    return proto.skylark_debugging.Value.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.skylark_debugging.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.skylark_debugging.Value}
 */
proto.skylark_debugging.Value.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setDescription(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setType(value);
                break;
            case 4:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setHasChildren(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.skylark_debugging.Value.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.skylark_debugging.Value.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.skylark_debugging.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.skylark_debugging.Value.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getDescription();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getType();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getHasChildren();
    if (f) {
        writer.writeBool(4, f);
    }
    f = message.getId();
    if (f !== 0) {
        writer.writeInt64(5, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.skylark_debugging.Value.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.skylark_debugging.Value.prototype.setLabel = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional string description = 2;
 * @return {string}
 */
proto.skylark_debugging.Value.prototype.getDescription = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.skylark_debugging.Value.prototype.setDescription = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * optional string type = 3;
 * @return {string}
 */
proto.skylark_debugging.Value.prototype.getType = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/** @param {string} value */
proto.skylark_debugging.Value.prototype.setType = function (value) {
    jspb.Message.setField(this, 3, value);
};
/**
 * optional bool has_children = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.skylark_debugging.Value.prototype.getHasChildren = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};
/** @param {boolean} value */
proto.skylark_debugging.Value.prototype.setHasChildren = function (value) {
    jspb.Message.setField(this, 4, value);
};
/**
 * optional int64 id = 5;
 * @return {number}
 */
proto.skylark_debugging.Value.prototype.getId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};
/** @param {number} value */
proto.skylark_debugging.Value.prototype.setId = function (value) {
    jspb.Message.setField(this, 5, value);
};
/**
 * @enum {number}
 */
proto.skylark_debugging.Stepping = {
    NONE: 0,
    INTO: 1,
    OVER: 2,
    OUT: 3
};
/**
 * @enum {number}
 */
proto.skylark_debugging.PauseReason = {
    UNSET: 0,
    STEPPING: 1,
    ALL_THREADS_PAUSED: 2,
    PAUSE_THREAD_REQUEST: 3,
    HIT_BREAKPOINT: 4,
    CONDITIONAL_BREAKPOINT_ERROR: 5,
    INITIALIZING: 6
};
goog.object.extend(exports, proto.skylark_debugging);
//# sourceMappingURL=skylark_debugging_pb.js.map