"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
goog.provide('proto.build_event_stream.TargetComplete');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.build_event_stream.File');
goog.require('proto.build_event_stream.OutputGroup');
goog.forwardDeclare('proto.build_event_stream.TestSize');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.TargetComplete = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.build_event_stream.TargetComplete.repeatedFields_, null);
};
goog.inherits(proto.build_event_stream.TargetComplete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.TargetComplete.displayName = 'proto.build_event_stream.TargetComplete';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.build_event_stream.TargetComplete.repeatedFields_ = [2, 4, 3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.TargetComplete.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.TargetComplete.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.TargetComplete} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.TargetComplete.toObject = function (includeInstance, msg) {
        var f, obj = {
            success: jspb.Message.getFieldWithDefault(msg, 1, false),
            targetKind: jspb.Message.getFieldWithDefault(msg, 5, ""),
            testSize: jspb.Message.getFieldWithDefault(msg, 6, 0),
            outputGroupList: jspb.Message.toObjectList(msg.getOutputGroupList(), proto.build_event_stream.OutputGroup.toObject, includeInstance),
            importantOutputList: jspb.Message.toObjectList(msg.getImportantOutputList(), proto.build_event_stream.File.toObject, includeInstance),
            tagList: jspb.Message.getRepeatedField(msg, 3),
            testTimeoutSeconds: jspb.Message.getFieldWithDefault(msg, 7, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.TargetComplete}
 */
proto.build_event_stream.TargetComplete.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.TargetComplete;
    return proto.build_event_stream.TargetComplete.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.TargetComplete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.TargetComplete}
 */
proto.build_event_stream.TargetComplete.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setSuccess(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setTargetKind(value);
                break;
            case 6:
                var value = /** @type {!proto.build_event_stream.TestSize} */ (reader.readEnum());
                msg.setTestSize(value);
                break;
            case 2:
                var value = new proto.build_event_stream.OutputGroup;
                reader.readMessage(value, proto.build_event_stream.OutputGroup.deserializeBinaryFromReader);
                msg.addOutputGroup(value);
                break;
            case 4:
                var value = new proto.build_event_stream.File;
                reader.readMessage(value, proto.build_event_stream.File.deserializeBinaryFromReader);
                msg.addImportantOutput(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.addTag(value);
                break;
            case 7:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTestTimeoutSeconds(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.TargetComplete.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.TargetComplete.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.TargetComplete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.TargetComplete.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSuccess();
    if (f) {
        writer.writeBool(1, f);
    }
    f = message.getTargetKind();
    if (f.length > 0) {
        writer.writeString(5, f);
    }
    f = message.getTestSize();
    if (f !== 0.0) {
        writer.writeEnum(6, f);
    }
    f = message.getOutputGroupList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.build_event_stream.OutputGroup.serializeBinaryToWriter);
    }
    f = message.getImportantOutputList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(4, f, proto.build_event_stream.File.serializeBinaryToWriter);
    }
    f = message.getTagList();
    if (f.length > 0) {
        writer.writeRepeatedString(3, f);
    }
    f = message.getTestTimeoutSeconds();
    if (f !== 0) {
        writer.writeInt64(7, f);
    }
};
/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.build_event_stream.TargetComplete.prototype.getSuccess = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};
/** @param {boolean} value */
proto.build_event_stream.TargetComplete.prototype.setSuccess = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional string target_kind = 5;
 * @return {string}
 */
proto.build_event_stream.TargetComplete.prototype.getTargetKind = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};
/** @param {string} value */
proto.build_event_stream.TargetComplete.prototype.setTargetKind = function (value) {
    jspb.Message.setField(this, 5, value);
};
/**
 * optional TestSize test_size = 6;
 * @return {!proto.build_event_stream.TestSize}
 */
proto.build_event_stream.TargetComplete.prototype.getTestSize = function () {
    return /** @type {!proto.build_event_stream.TestSize} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};
/** @param {!proto.build_event_stream.TestSize} value */
proto.build_event_stream.TargetComplete.prototype.setTestSize = function (value) {
    jspb.Message.setField(this, 6, value);
};
/**
 * repeated OutputGroup output_group = 2;
 * @return {!Array.<!proto.build_event_stream.OutputGroup>}
 */
proto.build_event_stream.TargetComplete.prototype.getOutputGroupList = function () {
    return /** @type{!Array.<!proto.build_event_stream.OutputGroup>} */ (jspb.Message.getRepeatedWrapperField(this, proto.build_event_stream.OutputGroup, 2));
};
/** @param {!Array.<!proto.build_event_stream.OutputGroup>} value */
proto.build_event_stream.TargetComplete.prototype.setOutputGroupList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.build_event_stream.OutputGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.build_event_stream.OutputGroup}
 */
proto.build_event_stream.TargetComplete.prototype.addOutputGroup = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.build_event_stream.OutputGroup, opt_index);
};
proto.build_event_stream.TargetComplete.prototype.clearOutputGroupList = function () {
    this.setOutputGroupList([]);
};
/**
 * repeated File important_output = 4;
 * @return {!Array.<!proto.build_event_stream.File>}
 */
proto.build_event_stream.TargetComplete.prototype.getImportantOutputList = function () {
    return /** @type{!Array.<!proto.build_event_stream.File>} */ (jspb.Message.getRepeatedWrapperField(this, proto.build_event_stream.File, 4));
};
/** @param {!Array.<!proto.build_event_stream.File>} value */
proto.build_event_stream.TargetComplete.prototype.setImportantOutputList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 4, value);
};
/**
 * @param {!proto.build_event_stream.File=} opt_value
 * @param {number=} opt_index
 * @return {!proto.build_event_stream.File}
 */
proto.build_event_stream.TargetComplete.prototype.addImportantOutput = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.build_event_stream.File, opt_index);
};
proto.build_event_stream.TargetComplete.prototype.clearImportantOutputList = function () {
    this.setImportantOutputList([]);
};
/**
 * repeated string tag = 3;
 * @return {!Array.<string>}
 */
proto.build_event_stream.TargetComplete.prototype.getTagList = function () {
    return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};
/** @param {!Array.<string>} value */
proto.build_event_stream.TargetComplete.prototype.setTagList = function (value) {
    jspb.Message.setField(this, 3, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.build_event_stream.TargetComplete.prototype.addTag = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};
proto.build_event_stream.TargetComplete.prototype.clearTagList = function () {
    this.setTagList([]);
};
/**
 * optional int64 test_timeout_seconds = 7;
 * @return {number}
 */
proto.build_event_stream.TargetComplete.prototype.getTestTimeoutSeconds = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};
/** @param {number} value */
proto.build_event_stream.TargetComplete.prototype.setTestTimeoutSeconds = function (value) {
    jspb.Message.setField(this, 7, value);
};
//# sourceMappingURL=targetcomplete.js.map