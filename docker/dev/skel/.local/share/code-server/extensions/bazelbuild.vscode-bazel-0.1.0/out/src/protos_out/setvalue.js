"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
goog.provide('proto.blaze.invocation_policy.SetValue');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.blaze.invocation_policy.SetValue = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.blaze.invocation_policy.SetValue.repeatedFields_, null);
};
goog.inherits(proto.blaze.invocation_policy.SetValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.blaze.invocation_policy.SetValue.displayName = 'proto.blaze.invocation_policy.SetValue';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.blaze.invocation_policy.SetValue.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.blaze.invocation_policy.SetValue.prototype.toObject = function (opt_includeInstance) {
        return proto.blaze.invocation_policy.SetValue.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.blaze.invocation_policy.SetValue} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.blaze.invocation_policy.SetValue.toObject = function (includeInstance, msg) {
        var f, obj = {
            flagValueList: jspb.Message.getRepeatedField(msg, 1),
            overridable: jspb.Message.getField(msg, 2),
            append: jspb.Message.getField(msg, 3)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.blaze.invocation_policy.SetValue}
 */
proto.blaze.invocation_policy.SetValue.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.blaze.invocation_policy.SetValue;
    return proto.blaze.invocation_policy.SetValue.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.blaze.invocation_policy.SetValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.blaze.invocation_policy.SetValue}
 */
proto.blaze.invocation_policy.SetValue.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addFlagValue(value);
                break;
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setOverridable(value);
                break;
            case 3:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setAppend(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.blaze.invocation_policy.SetValue.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.blaze.invocation_policy.SetValue.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.blaze.invocation_policy.SetValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.blaze.invocation_policy.SetValue.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFlagValueList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
    f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
    if (f != null) {
        writer.writeBool(2, f);
    }
    f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
    if (f != null) {
        writer.writeBool(3, f);
    }
};
/**
 * repeated string flag_value = 1;
 * @return {!Array.<string>}
 */
proto.blaze.invocation_policy.SetValue.prototype.getFlagValueList = function () {
    return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};
/** @param {!Array.<string>} value */
proto.blaze.invocation_policy.SetValue.prototype.setFlagValueList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.blaze.invocation_policy.SetValue.prototype.addFlagValue = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
proto.blaze.invocation_policy.SetValue.prototype.clearFlagValueList = function () {
    this.setFlagValueList([]);
};
/**
 * optional bool overridable = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.blaze.invocation_policy.SetValue.prototype.getOverridable = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};
/** @param {boolean} value */
proto.blaze.invocation_policy.SetValue.prototype.setOverridable = function (value) {
    jspb.Message.setField(this, 2, value);
};
proto.blaze.invocation_policy.SetValue.prototype.clearOverridable = function () {
    jspb.Message.setField(this, 2, undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.blaze.invocation_policy.SetValue.prototype.hasOverridable = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional bool append = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.blaze.invocation_policy.SetValue.prototype.getAppend = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};
/** @param {boolean} value */
proto.blaze.invocation_policy.SetValue.prototype.setAppend = function (value) {
    jspb.Message.setField(this, 3, value);
};
proto.blaze.invocation_policy.SetValue.prototype.clearAppend = function () {
    jspb.Message.setField(this, 3, undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.blaze.invocation_policy.SetValue.prototype.hasAppend = function () {
    return jspb.Message.getField(this, 3) != null;
};
//# sourceMappingURL=setvalue.js.map