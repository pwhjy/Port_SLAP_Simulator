"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
goog.provide('proto.command_line.Option');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.forwardDeclare('proto.options.OptionEffectTag');
goog.forwardDeclare('proto.options.OptionMetadataTag');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.command_line.Option = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.command_line.Option.repeatedFields_, null);
};
goog.inherits(proto.command_line.Option, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.command_line.Option.displayName = 'proto.command_line.Option';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.command_line.Option.repeatedFields_ = [4, 5];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.command_line.Option.prototype.toObject = function (opt_includeInstance) {
        return proto.command_line.Option.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.command_line.Option} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.command_line.Option.toObject = function (includeInstance, msg) {
        var f, obj = {
            combinedForm: jspb.Message.getFieldWithDefault(msg, 1, ""),
            optionName: jspb.Message.getFieldWithDefault(msg, 2, ""),
            optionValue: jspb.Message.getFieldWithDefault(msg, 3, ""),
            effectTagsList: jspb.Message.getRepeatedField(msg, 4),
            metadataTagsList: jspb.Message.getRepeatedField(msg, 5)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.command_line.Option}
 */
proto.command_line.Option.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.command_line.Option;
    return proto.command_line.Option.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.command_line.Option} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.command_line.Option}
 */
proto.command_line.Option.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setCombinedForm(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setOptionName(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setOptionValue(value);
                break;
            case 4:
                var value = /** @type {!Array.<!proto.options.OptionEffectTag>} */ (reader.readPackedEnum());
                msg.setEffectTagsList(value);
                break;
            case 5:
                var value = /** @type {!Array.<!proto.options.OptionMetadataTag>} */ (reader.readPackedEnum());
                msg.setMetadataTagsList(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.command_line.Option.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.command_line.Option.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.command_line.Option} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.command_line.Option.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCombinedForm();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getOptionName();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getOptionValue();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getEffectTagsList();
    if (f.length > 0) {
        writer.writePackedEnum(4, f);
    }
    f = message.getMetadataTagsList();
    if (f.length > 0) {
        writer.writePackedEnum(5, f);
    }
};
/**
 * optional string combined_form = 1;
 * @return {string}
 */
proto.command_line.Option.prototype.getCombinedForm = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.command_line.Option.prototype.setCombinedForm = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional string option_name = 2;
 * @return {string}
 */
proto.command_line.Option.prototype.getOptionName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.command_line.Option.prototype.setOptionName = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * optional string option_value = 3;
 * @return {string}
 */
proto.command_line.Option.prototype.getOptionValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/** @param {string} value */
proto.command_line.Option.prototype.setOptionValue = function (value) {
    jspb.Message.setField(this, 3, value);
};
/**
 * repeated options.OptionEffectTag effect_tags = 4;
 * @return {!Array.<!proto.options.OptionEffectTag>}
 */
proto.command_line.Option.prototype.getEffectTagsList = function () {
    return /** @type {!Array.<!proto.options.OptionEffectTag>} */ (jspb.Message.getRepeatedField(this, 4));
};
/** @param {!Array.<!proto.options.OptionEffectTag>} value */
proto.command_line.Option.prototype.setEffectTagsList = function (value) {
    jspb.Message.setField(this, 4, value || []);
};
/**
 * @param {!proto.options.OptionEffectTag} value
 * @param {number=} opt_index
 */
proto.command_line.Option.prototype.addEffectTags = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};
proto.command_line.Option.prototype.clearEffectTagsList = function () {
    this.setEffectTagsList([]);
};
/**
 * repeated options.OptionMetadataTag metadata_tags = 5;
 * @return {!Array.<!proto.options.OptionMetadataTag>}
 */
proto.command_line.Option.prototype.getMetadataTagsList = function () {
    return /** @type {!Array.<!proto.options.OptionMetadataTag>} */ (jspb.Message.getRepeatedField(this, 5));
};
/** @param {!Array.<!proto.options.OptionMetadataTag>} value */
proto.command_line.Option.prototype.setMetadataTagsList = function (value) {
    jspb.Message.setField(this, 5, value || []);
};
/**
 * @param {!proto.options.OptionMetadataTag} value
 * @param {number=} opt_index
 */
proto.command_line.Option.prototype.addMetadataTags = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};
proto.command_line.Option.prototype.clearMetadataTagsList = function () {
    this.setMetadataTagsList([]);
};
//# sourceMappingURL=option.js.map