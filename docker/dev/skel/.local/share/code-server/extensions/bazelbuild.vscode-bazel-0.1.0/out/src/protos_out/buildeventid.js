"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
goog.provide('proto.build_event_stream.BuildEventId');
goog.provide('proto.build_event_stream.BuildEventId.ActionCompletedId');
goog.provide('proto.build_event_stream.BuildEventId.BuildFinishedId');
goog.provide('proto.build_event_stream.BuildEventId.BuildMetricsId');
goog.provide('proto.build_event_stream.BuildEventId.BuildStartedId');
goog.provide('proto.build_event_stream.BuildEventId.BuildToolLogsId');
goog.provide('proto.build_event_stream.BuildEventId.ConfigurationId');
goog.provide('proto.build_event_stream.BuildEventId.ConfiguredLabelId');
goog.provide('proto.build_event_stream.BuildEventId.FetchId');
goog.provide('proto.build_event_stream.BuildEventId.NamedSetOfFilesId');
goog.provide('proto.build_event_stream.BuildEventId.OptionsParsedId');
goog.provide('proto.build_event_stream.BuildEventId.PatternExpandedId');
goog.provide('proto.build_event_stream.BuildEventId.ProgressId');
goog.provide('proto.build_event_stream.BuildEventId.StructuredCommandLineId');
goog.provide('proto.build_event_stream.BuildEventId.TargetCompletedId');
goog.provide('proto.build_event_stream.BuildEventId.TargetConfiguredId');
goog.provide('proto.build_event_stream.BuildEventId.TestResultId');
goog.provide('proto.build_event_stream.BuildEventId.TestSummaryId');
goog.provide('proto.build_event_stream.BuildEventId.UnconfiguredLabelId');
goog.provide('proto.build_event_stream.BuildEventId.UnknownBuildEventId');
goog.provide('proto.build_event_stream.BuildEventId.UnstructuredCommandLineId');
goog.provide('proto.build_event_stream.BuildEventId.WorkspaceStatusId');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.build_event_stream.BuildEventId.oneofGroups_);
};
goog.inherits(proto.build_event_stream.BuildEventId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.displayName = 'proto.build_event_stream.BuildEventId';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.build_event_stream.BuildEventId.oneofGroups_ = [[1, 2, 3, 11, 18, 14, 12, 17, 15, 16, 4, 10, 13, 5, 6, 19, 21, 8, 7, 9, 20, 22]];
/**
 * @enum {number}
 */
proto.build_event_stream.BuildEventId.IdCase = {
    ID_NOT_SET: 0,
    UNKNOWN: 1,
    PROGRESS: 2,
    STARTED: 3,
    UNSTRUCTURED_COMMAND_LINE: 11,
    STRUCTURED_COMMAND_LINE: 18,
    WORKSPACE_STATUS: 14,
    OPTIONS_PARSED: 12,
    FETCH: 17,
    CONFIGURATION: 15,
    TARGET_CONFIGURED: 16,
    PATTERN: 4,
    PATTERN_SKIPPED: 10,
    NAMED_SET: 13,
    TARGET_COMPLETED: 5,
    ACTION_COMPLETED: 6,
    UNCONFIGURED_LABEL: 19,
    CONFIGURED_LABEL: 21,
    TEST_RESULT: 8,
    TEST_SUMMARY: 7,
    BUILD_FINISHED: 9,
    BUILD_TOOL_LOGS: 20,
    BUILD_METRICS: 22
};
/**
 * @return {proto.build_event_stream.BuildEventId.IdCase}
 */
proto.build_event_stream.BuildEventId.prototype.getIdCase = function () {
    return /** @type {proto.build_event_stream.BuildEventId.IdCase} */ (jspb.Message.computeOneofCase(this, proto.build_event_stream.BuildEventId.oneofGroups_[0]));
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.toObject = function (includeInstance, msg) {
        var f, obj = {
            unknown: (f = msg.getUnknown()) && proto.build_event_stream.BuildEventId.UnknownBuildEventId.toObject(includeInstance, f),
            progress: (f = msg.getProgress()) && proto.build_event_stream.BuildEventId.ProgressId.toObject(includeInstance, f),
            started: (f = msg.getStarted()) && proto.build_event_stream.BuildEventId.BuildStartedId.toObject(includeInstance, f),
            unstructuredCommandLine: (f = msg.getUnstructuredCommandLine()) && proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.toObject(includeInstance, f),
            structuredCommandLine: (f = msg.getStructuredCommandLine()) && proto.build_event_stream.BuildEventId.StructuredCommandLineId.toObject(includeInstance, f),
            workspaceStatus: (f = msg.getWorkspaceStatus()) && proto.build_event_stream.BuildEventId.WorkspaceStatusId.toObject(includeInstance, f),
            optionsParsed: (f = msg.getOptionsParsed()) && proto.build_event_stream.BuildEventId.OptionsParsedId.toObject(includeInstance, f),
            fetch: (f = msg.getFetch()) && proto.build_event_stream.BuildEventId.FetchId.toObject(includeInstance, f),
            configuration: (f = msg.getConfiguration()) && proto.build_event_stream.BuildEventId.ConfigurationId.toObject(includeInstance, f),
            targetConfigured: (f = msg.getTargetConfigured()) && proto.build_event_stream.BuildEventId.TargetConfiguredId.toObject(includeInstance, f),
            pattern: (f = msg.getPattern()) && proto.build_event_stream.BuildEventId.PatternExpandedId.toObject(includeInstance, f),
            patternSkipped: (f = msg.getPatternSkipped()) && proto.build_event_stream.BuildEventId.PatternExpandedId.toObject(includeInstance, f),
            namedSet: (f = msg.getNamedSet()) && proto.build_event_stream.BuildEventId.NamedSetOfFilesId.toObject(includeInstance, f),
            targetCompleted: (f = msg.getTargetCompleted()) && proto.build_event_stream.BuildEventId.TargetCompletedId.toObject(includeInstance, f),
            actionCompleted: (f = msg.getActionCompleted()) && proto.build_event_stream.BuildEventId.ActionCompletedId.toObject(includeInstance, f),
            unconfiguredLabel: (f = msg.getUnconfiguredLabel()) && proto.build_event_stream.BuildEventId.UnconfiguredLabelId.toObject(includeInstance, f),
            configuredLabel: (f = msg.getConfiguredLabel()) && proto.build_event_stream.BuildEventId.ConfiguredLabelId.toObject(includeInstance, f),
            testResult: (f = msg.getTestResult()) && proto.build_event_stream.BuildEventId.TestResultId.toObject(includeInstance, f),
            testSummary: (f = msg.getTestSummary()) && proto.build_event_stream.BuildEventId.TestSummaryId.toObject(includeInstance, f),
            buildFinished: (f = msg.getBuildFinished()) && proto.build_event_stream.BuildEventId.BuildFinishedId.toObject(includeInstance, f),
            buildToolLogs: (f = msg.getBuildToolLogs()) && proto.build_event_stream.BuildEventId.BuildToolLogsId.toObject(includeInstance, f),
            buildMetrics: (f = msg.getBuildMetrics()) && proto.build_event_stream.BuildEventId.BuildMetricsId.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId}
 */
proto.build_event_stream.BuildEventId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId;
    return proto.build_event_stream.BuildEventId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId}
 */
proto.build_event_stream.BuildEventId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.build_event_stream.BuildEventId.UnknownBuildEventId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.UnknownBuildEventId.deserializeBinaryFromReader);
                msg.setUnknown(value);
                break;
            case 2:
                var value = new proto.build_event_stream.BuildEventId.ProgressId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.ProgressId.deserializeBinaryFromReader);
                msg.setProgress(value);
                break;
            case 3:
                var value = new proto.build_event_stream.BuildEventId.BuildStartedId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.BuildStartedId.deserializeBinaryFromReader);
                msg.setStarted(value);
                break;
            case 11:
                var value = new proto.build_event_stream.BuildEventId.UnstructuredCommandLineId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.deserializeBinaryFromReader);
                msg.setUnstructuredCommandLine(value);
                break;
            case 18:
                var value = new proto.build_event_stream.BuildEventId.StructuredCommandLineId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.StructuredCommandLineId.deserializeBinaryFromReader);
                msg.setStructuredCommandLine(value);
                break;
            case 14:
                var value = new proto.build_event_stream.BuildEventId.WorkspaceStatusId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.WorkspaceStatusId.deserializeBinaryFromReader);
                msg.setWorkspaceStatus(value);
                break;
            case 12:
                var value = new proto.build_event_stream.BuildEventId.OptionsParsedId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.OptionsParsedId.deserializeBinaryFromReader);
                msg.setOptionsParsed(value);
                break;
            case 17:
                var value = new proto.build_event_stream.BuildEventId.FetchId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.FetchId.deserializeBinaryFromReader);
                msg.setFetch(value);
                break;
            case 15:
                var value = new proto.build_event_stream.BuildEventId.ConfigurationId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.ConfigurationId.deserializeBinaryFromReader);
                msg.setConfiguration(value);
                break;
            case 16:
                var value = new proto.build_event_stream.BuildEventId.TargetConfiguredId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.TargetConfiguredId.deserializeBinaryFromReader);
                msg.setTargetConfigured(value);
                break;
            case 4:
                var value = new proto.build_event_stream.BuildEventId.PatternExpandedId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.PatternExpandedId.deserializeBinaryFromReader);
                msg.setPattern(value);
                break;
            case 10:
                var value = new proto.build_event_stream.BuildEventId.PatternExpandedId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.PatternExpandedId.deserializeBinaryFromReader);
                msg.setPatternSkipped(value);
                break;
            case 13:
                var value = new proto.build_event_stream.BuildEventId.NamedSetOfFilesId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.NamedSetOfFilesId.deserializeBinaryFromReader);
                msg.setNamedSet(value);
                break;
            case 5:
                var value = new proto.build_event_stream.BuildEventId.TargetCompletedId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.TargetCompletedId.deserializeBinaryFromReader);
                msg.setTargetCompleted(value);
                break;
            case 6:
                var value = new proto.build_event_stream.BuildEventId.ActionCompletedId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.ActionCompletedId.deserializeBinaryFromReader);
                msg.setActionCompleted(value);
                break;
            case 19:
                var value = new proto.build_event_stream.BuildEventId.UnconfiguredLabelId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.UnconfiguredLabelId.deserializeBinaryFromReader);
                msg.setUnconfiguredLabel(value);
                break;
            case 21:
                var value = new proto.build_event_stream.BuildEventId.ConfiguredLabelId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.ConfiguredLabelId.deserializeBinaryFromReader);
                msg.setConfiguredLabel(value);
                break;
            case 8:
                var value = new proto.build_event_stream.BuildEventId.TestResultId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.TestResultId.deserializeBinaryFromReader);
                msg.setTestResult(value);
                break;
            case 7:
                var value = new proto.build_event_stream.BuildEventId.TestSummaryId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.TestSummaryId.deserializeBinaryFromReader);
                msg.setTestSummary(value);
                break;
            case 9:
                var value = new proto.build_event_stream.BuildEventId.BuildFinishedId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.BuildFinishedId.deserializeBinaryFromReader);
                msg.setBuildFinished(value);
                break;
            case 20:
                var value = new proto.build_event_stream.BuildEventId.BuildToolLogsId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.BuildToolLogsId.deserializeBinaryFromReader);
                msg.setBuildToolLogs(value);
                break;
            case 22:
                var value = new proto.build_event_stream.BuildEventId.BuildMetricsId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.BuildMetricsId.deserializeBinaryFromReader);
                msg.setBuildMetrics(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUnknown();
    if (f != null) {
        writer.writeMessage(1, f, proto.build_event_stream.BuildEventId.UnknownBuildEventId.serializeBinaryToWriter);
    }
    f = message.getProgress();
    if (f != null) {
        writer.writeMessage(2, f, proto.build_event_stream.BuildEventId.ProgressId.serializeBinaryToWriter);
    }
    f = message.getStarted();
    if (f != null) {
        writer.writeMessage(3, f, proto.build_event_stream.BuildEventId.BuildStartedId.serializeBinaryToWriter);
    }
    f = message.getUnstructuredCommandLine();
    if (f != null) {
        writer.writeMessage(11, f, proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.serializeBinaryToWriter);
    }
    f = message.getStructuredCommandLine();
    if (f != null) {
        writer.writeMessage(18, f, proto.build_event_stream.BuildEventId.StructuredCommandLineId.serializeBinaryToWriter);
    }
    f = message.getWorkspaceStatus();
    if (f != null) {
        writer.writeMessage(14, f, proto.build_event_stream.BuildEventId.WorkspaceStatusId.serializeBinaryToWriter);
    }
    f = message.getOptionsParsed();
    if (f != null) {
        writer.writeMessage(12, f, proto.build_event_stream.BuildEventId.OptionsParsedId.serializeBinaryToWriter);
    }
    f = message.getFetch();
    if (f != null) {
        writer.writeMessage(17, f, proto.build_event_stream.BuildEventId.FetchId.serializeBinaryToWriter);
    }
    f = message.getConfiguration();
    if (f != null) {
        writer.writeMessage(15, f, proto.build_event_stream.BuildEventId.ConfigurationId.serializeBinaryToWriter);
    }
    f = message.getTargetConfigured();
    if (f != null) {
        writer.writeMessage(16, f, proto.build_event_stream.BuildEventId.TargetConfiguredId.serializeBinaryToWriter);
    }
    f = message.getPattern();
    if (f != null) {
        writer.writeMessage(4, f, proto.build_event_stream.BuildEventId.PatternExpandedId.serializeBinaryToWriter);
    }
    f = message.getPatternSkipped();
    if (f != null) {
        writer.writeMessage(10, f, proto.build_event_stream.BuildEventId.PatternExpandedId.serializeBinaryToWriter);
    }
    f = message.getNamedSet();
    if (f != null) {
        writer.writeMessage(13, f, proto.build_event_stream.BuildEventId.NamedSetOfFilesId.serializeBinaryToWriter);
    }
    f = message.getTargetCompleted();
    if (f != null) {
        writer.writeMessage(5, f, proto.build_event_stream.BuildEventId.TargetCompletedId.serializeBinaryToWriter);
    }
    f = message.getActionCompleted();
    if (f != null) {
        writer.writeMessage(6, f, proto.build_event_stream.BuildEventId.ActionCompletedId.serializeBinaryToWriter);
    }
    f = message.getUnconfiguredLabel();
    if (f != null) {
        writer.writeMessage(19, f, proto.build_event_stream.BuildEventId.UnconfiguredLabelId.serializeBinaryToWriter);
    }
    f = message.getConfiguredLabel();
    if (f != null) {
        writer.writeMessage(21, f, proto.build_event_stream.BuildEventId.ConfiguredLabelId.serializeBinaryToWriter);
    }
    f = message.getTestResult();
    if (f != null) {
        writer.writeMessage(8, f, proto.build_event_stream.BuildEventId.TestResultId.serializeBinaryToWriter);
    }
    f = message.getTestSummary();
    if (f != null) {
        writer.writeMessage(7, f, proto.build_event_stream.BuildEventId.TestSummaryId.serializeBinaryToWriter);
    }
    f = message.getBuildFinished();
    if (f != null) {
        writer.writeMessage(9, f, proto.build_event_stream.BuildEventId.BuildFinishedId.serializeBinaryToWriter);
    }
    f = message.getBuildToolLogs();
    if (f != null) {
        writer.writeMessage(20, f, proto.build_event_stream.BuildEventId.BuildToolLogsId.serializeBinaryToWriter);
    }
    f = message.getBuildMetrics();
    if (f != null) {
        writer.writeMessage(22, f, proto.build_event_stream.BuildEventId.BuildMetricsId.serializeBinaryToWriter);
    }
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.UnknownBuildEventId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.UnknownBuildEventId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.UnknownBuildEventId.displayName = 'proto.build_event_stream.BuildEventId.UnknownBuildEventId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.UnknownBuildEventId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.UnknownBuildEventId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.UnknownBuildEventId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.UnknownBuildEventId.toObject = function (includeInstance, msg) {
        var f, obj = {
            details: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.UnknownBuildEventId}
 */
proto.build_event_stream.BuildEventId.UnknownBuildEventId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.UnknownBuildEventId;
    return proto.build_event_stream.BuildEventId.UnknownBuildEventId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.UnknownBuildEventId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.UnknownBuildEventId}
 */
proto.build_event_stream.BuildEventId.UnknownBuildEventId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setDetails(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.UnknownBuildEventId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.UnknownBuildEventId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.UnknownBuildEventId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.UnknownBuildEventId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getDetails();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string details = 1;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.UnknownBuildEventId.prototype.getDetails = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.UnknownBuildEventId.prototype.setDetails = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.ProgressId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.ProgressId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.ProgressId.displayName = 'proto.build_event_stream.BuildEventId.ProgressId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.ProgressId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.ProgressId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.ProgressId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.ProgressId.toObject = function (includeInstance, msg) {
        var f, obj = {
            opaqueCount: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.ProgressId}
 */
proto.build_event_stream.BuildEventId.ProgressId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.ProgressId;
    return proto.build_event_stream.BuildEventId.ProgressId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.ProgressId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.ProgressId}
 */
proto.build_event_stream.BuildEventId.ProgressId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setOpaqueCount(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.ProgressId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.ProgressId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.ProgressId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.ProgressId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getOpaqueCount();
    if (f !== 0) {
        writer.writeInt32(1, f);
    }
};
/**
 * optional int32 opaque_count = 1;
 * @return {number}
 */
proto.build_event_stream.BuildEventId.ProgressId.prototype.getOpaqueCount = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {number} value */
proto.build_event_stream.BuildEventId.ProgressId.prototype.setOpaqueCount = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.BuildStartedId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.BuildStartedId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.BuildStartedId.displayName = 'proto.build_event_stream.BuildEventId.BuildStartedId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.BuildStartedId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.BuildStartedId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.BuildStartedId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.BuildStartedId.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.BuildStartedId}
 */
proto.build_event_stream.BuildEventId.BuildStartedId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.BuildStartedId;
    return proto.build_event_stream.BuildEventId.BuildStartedId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.BuildStartedId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.BuildStartedId}
 */
proto.build_event_stream.BuildEventId.BuildStartedId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.BuildStartedId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.BuildStartedId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.BuildStartedId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.BuildStartedId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.UnstructuredCommandLineId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.UnstructuredCommandLineId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.displayName = 'proto.build_event_stream.BuildEventId.UnstructuredCommandLineId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.UnstructuredCommandLineId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.UnstructuredCommandLineId}
 */
proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.UnstructuredCommandLineId;
    return proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.UnstructuredCommandLineId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.UnstructuredCommandLineId}
 */
proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.UnstructuredCommandLineId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.UnstructuredCommandLineId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.StructuredCommandLineId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.StructuredCommandLineId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.StructuredCommandLineId.displayName = 'proto.build_event_stream.BuildEventId.StructuredCommandLineId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.StructuredCommandLineId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.StructuredCommandLineId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.StructuredCommandLineId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.StructuredCommandLineId.toObject = function (includeInstance, msg) {
        var f, obj = {
            commandLineLabel: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.StructuredCommandLineId}
 */
proto.build_event_stream.BuildEventId.StructuredCommandLineId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.StructuredCommandLineId;
    return proto.build_event_stream.BuildEventId.StructuredCommandLineId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.StructuredCommandLineId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.StructuredCommandLineId}
 */
proto.build_event_stream.BuildEventId.StructuredCommandLineId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setCommandLineLabel(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.StructuredCommandLineId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.StructuredCommandLineId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.StructuredCommandLineId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.StructuredCommandLineId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCommandLineLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string command_line_label = 1;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.StructuredCommandLineId.prototype.getCommandLineLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.StructuredCommandLineId.prototype.setCommandLineLabel = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.WorkspaceStatusId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.WorkspaceStatusId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.WorkspaceStatusId.displayName = 'proto.build_event_stream.BuildEventId.WorkspaceStatusId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.WorkspaceStatusId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.WorkspaceStatusId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.WorkspaceStatusId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.WorkspaceStatusId.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.WorkspaceStatusId}
 */
proto.build_event_stream.BuildEventId.WorkspaceStatusId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.WorkspaceStatusId;
    return proto.build_event_stream.BuildEventId.WorkspaceStatusId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.WorkspaceStatusId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.WorkspaceStatusId}
 */
proto.build_event_stream.BuildEventId.WorkspaceStatusId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.WorkspaceStatusId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.WorkspaceStatusId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.WorkspaceStatusId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.WorkspaceStatusId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.OptionsParsedId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.OptionsParsedId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.OptionsParsedId.displayName = 'proto.build_event_stream.BuildEventId.OptionsParsedId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.OptionsParsedId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.OptionsParsedId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.OptionsParsedId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.OptionsParsedId.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.OptionsParsedId}
 */
proto.build_event_stream.BuildEventId.OptionsParsedId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.OptionsParsedId;
    return proto.build_event_stream.BuildEventId.OptionsParsedId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.OptionsParsedId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.OptionsParsedId}
 */
proto.build_event_stream.BuildEventId.OptionsParsedId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.OptionsParsedId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.OptionsParsedId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.OptionsParsedId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.OptionsParsedId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.FetchId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.FetchId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.FetchId.displayName = 'proto.build_event_stream.BuildEventId.FetchId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.FetchId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.FetchId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.FetchId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.FetchId.toObject = function (includeInstance, msg) {
        var f, obj = {
            url: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.FetchId}
 */
proto.build_event_stream.BuildEventId.FetchId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.FetchId;
    return proto.build_event_stream.BuildEventId.FetchId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.FetchId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.FetchId}
 */
proto.build_event_stream.BuildEventId.FetchId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUrl(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.FetchId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.FetchId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.FetchId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.FetchId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUrl();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string url = 1;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.FetchId.prototype.getUrl = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.FetchId.prototype.setUrl = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.PatternExpandedId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.build_event_stream.BuildEventId.PatternExpandedId.repeatedFields_, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.PatternExpandedId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.PatternExpandedId.displayName = 'proto.build_event_stream.BuildEventId.PatternExpandedId';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.build_event_stream.BuildEventId.PatternExpandedId.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.PatternExpandedId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.PatternExpandedId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.PatternExpandedId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.PatternExpandedId.toObject = function (includeInstance, msg) {
        var f, obj = {
            patternList: jspb.Message.getRepeatedField(msg, 1)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.PatternExpandedId}
 */
proto.build_event_stream.BuildEventId.PatternExpandedId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.PatternExpandedId;
    return proto.build_event_stream.BuildEventId.PatternExpandedId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.PatternExpandedId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.PatternExpandedId}
 */
proto.build_event_stream.BuildEventId.PatternExpandedId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addPattern(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.PatternExpandedId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.PatternExpandedId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.PatternExpandedId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.PatternExpandedId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPatternList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
};
/**
 * repeated string pattern = 1;
 * @return {!Array.<string>}
 */
proto.build_event_stream.BuildEventId.PatternExpandedId.prototype.getPatternList = function () {
    return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};
/** @param {!Array.<string>} value */
proto.build_event_stream.BuildEventId.PatternExpandedId.prototype.setPatternList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.build_event_stream.BuildEventId.PatternExpandedId.prototype.addPattern = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
proto.build_event_stream.BuildEventId.PatternExpandedId.prototype.clearPatternList = function () {
    this.setPatternList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.TargetConfiguredId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.TargetConfiguredId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.TargetConfiguredId.displayName = 'proto.build_event_stream.BuildEventId.TargetConfiguredId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.TargetConfiguredId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.TargetConfiguredId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.TargetConfiguredId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.TargetConfiguredId.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            aspect: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.TargetConfiguredId}
 */
proto.build_event_stream.BuildEventId.TargetConfiguredId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.TargetConfiguredId;
    return proto.build_event_stream.BuildEventId.TargetConfiguredId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.TargetConfiguredId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.TargetConfiguredId}
 */
proto.build_event_stream.BuildEventId.TargetConfiguredId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setAspect(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.TargetConfiguredId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.TargetConfiguredId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.TargetConfiguredId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.TargetConfiguredId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getAspect();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.TargetConfiguredId.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.TargetConfiguredId.prototype.setLabel = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional string aspect = 2;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.TargetConfiguredId.prototype.getAspect = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.TargetConfiguredId.prototype.setAspect = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.NamedSetOfFilesId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.NamedSetOfFilesId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.NamedSetOfFilesId.displayName = 'proto.build_event_stream.BuildEventId.NamedSetOfFilesId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.NamedSetOfFilesId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.NamedSetOfFilesId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.NamedSetOfFilesId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.NamedSetOfFilesId.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.NamedSetOfFilesId}
 */
proto.build_event_stream.BuildEventId.NamedSetOfFilesId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.NamedSetOfFilesId;
    return proto.build_event_stream.BuildEventId.NamedSetOfFilesId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.NamedSetOfFilesId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.NamedSetOfFilesId}
 */
proto.build_event_stream.BuildEventId.NamedSetOfFilesId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.NamedSetOfFilesId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.NamedSetOfFilesId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.NamedSetOfFilesId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.NamedSetOfFilesId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string id = 1;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.NamedSetOfFilesId.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.NamedSetOfFilesId.prototype.setId = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.ConfigurationId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.ConfigurationId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.ConfigurationId.displayName = 'proto.build_event_stream.BuildEventId.ConfigurationId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.ConfigurationId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.ConfigurationId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.ConfigurationId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.ConfigurationId.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.ConfigurationId}
 */
proto.build_event_stream.BuildEventId.ConfigurationId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.ConfigurationId;
    return proto.build_event_stream.BuildEventId.ConfigurationId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.ConfigurationId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.ConfigurationId}
 */
proto.build_event_stream.BuildEventId.ConfigurationId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.ConfigurationId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.ConfigurationId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.ConfigurationId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.ConfigurationId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string id = 1;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.ConfigurationId.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.ConfigurationId.prototype.setId = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.TargetCompletedId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.TargetCompletedId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.TargetCompletedId.displayName = 'proto.build_event_stream.BuildEventId.TargetCompletedId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.TargetCompletedId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.TargetCompletedId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.TargetCompletedId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.TargetCompletedId.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            configuration: (f = msg.getConfiguration()) && proto.build_event_stream.BuildEventId.ConfigurationId.toObject(includeInstance, f),
            aspect: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.TargetCompletedId}
 */
proto.build_event_stream.BuildEventId.TargetCompletedId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.TargetCompletedId;
    return proto.build_event_stream.BuildEventId.TargetCompletedId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.TargetCompletedId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.TargetCompletedId}
 */
proto.build_event_stream.BuildEventId.TargetCompletedId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 3:
                var value = new proto.build_event_stream.BuildEventId.ConfigurationId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.ConfigurationId.deserializeBinaryFromReader);
                msg.setConfiguration(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setAspect(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.TargetCompletedId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.TargetCompletedId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.TargetCompletedId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.TargetCompletedId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getConfiguration();
    if (f != null) {
        writer.writeMessage(3, f, proto.build_event_stream.BuildEventId.ConfigurationId.serializeBinaryToWriter);
    }
    f = message.getAspect();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.TargetCompletedId.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.TargetCompletedId.prototype.setLabel = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional ConfigurationId configuration = 3;
 * @return {?proto.build_event_stream.BuildEventId.ConfigurationId}
 */
proto.build_event_stream.BuildEventId.TargetCompletedId.prototype.getConfiguration = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.ConfigurationId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.ConfigurationId, 3));
};
/** @param {?proto.build_event_stream.BuildEventId.ConfigurationId|undefined} value */
proto.build_event_stream.BuildEventId.TargetCompletedId.prototype.setConfiguration = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};
proto.build_event_stream.BuildEventId.TargetCompletedId.prototype.clearConfiguration = function () {
    this.setConfiguration(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.TargetCompletedId.prototype.hasConfiguration = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional string aspect = 2;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.TargetCompletedId.prototype.getAspect = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.TargetCompletedId.prototype.setAspect = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.ActionCompletedId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.ActionCompletedId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.ActionCompletedId.displayName = 'proto.build_event_stream.BuildEventId.ActionCompletedId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.ActionCompletedId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.ActionCompletedId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.ActionCompletedId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.ActionCompletedId.toObject = function (includeInstance, msg) {
        var f, obj = {
            primaryOutput: jspb.Message.getFieldWithDefault(msg, 1, ""),
            label: jspb.Message.getFieldWithDefault(msg, 2, ""),
            configuration: (f = msg.getConfiguration()) && proto.build_event_stream.BuildEventId.ConfigurationId.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.ActionCompletedId}
 */
proto.build_event_stream.BuildEventId.ActionCompletedId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.ActionCompletedId;
    return proto.build_event_stream.BuildEventId.ActionCompletedId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.ActionCompletedId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.ActionCompletedId}
 */
proto.build_event_stream.BuildEventId.ActionCompletedId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPrimaryOutput(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 3:
                var value = new proto.build_event_stream.BuildEventId.ConfigurationId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.ConfigurationId.deserializeBinaryFromReader);
                msg.setConfiguration(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.ActionCompletedId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.ActionCompletedId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.ActionCompletedId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.ActionCompletedId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPrimaryOutput();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getConfiguration();
    if (f != null) {
        writer.writeMessage(3, f, proto.build_event_stream.BuildEventId.ConfigurationId.serializeBinaryToWriter);
    }
};
/**
 * optional string primary_output = 1;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.ActionCompletedId.prototype.getPrimaryOutput = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.ActionCompletedId.prototype.setPrimaryOutput = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional string label = 2;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.ActionCompletedId.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.ActionCompletedId.prototype.setLabel = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * optional ConfigurationId configuration = 3;
 * @return {?proto.build_event_stream.BuildEventId.ConfigurationId}
 */
proto.build_event_stream.BuildEventId.ActionCompletedId.prototype.getConfiguration = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.ConfigurationId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.ConfigurationId, 3));
};
/** @param {?proto.build_event_stream.BuildEventId.ConfigurationId|undefined} value */
proto.build_event_stream.BuildEventId.ActionCompletedId.prototype.setConfiguration = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};
proto.build_event_stream.BuildEventId.ActionCompletedId.prototype.clearConfiguration = function () {
    this.setConfiguration(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.ActionCompletedId.prototype.hasConfiguration = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.UnconfiguredLabelId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.UnconfiguredLabelId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.UnconfiguredLabelId.displayName = 'proto.build_event_stream.BuildEventId.UnconfiguredLabelId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.UnconfiguredLabelId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.UnconfiguredLabelId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.UnconfiguredLabelId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.UnconfiguredLabelId.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.UnconfiguredLabelId}
 */
proto.build_event_stream.BuildEventId.UnconfiguredLabelId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.UnconfiguredLabelId;
    return proto.build_event_stream.BuildEventId.UnconfiguredLabelId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.UnconfiguredLabelId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.UnconfiguredLabelId}
 */
proto.build_event_stream.BuildEventId.UnconfiguredLabelId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.UnconfiguredLabelId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.UnconfiguredLabelId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.UnconfiguredLabelId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.UnconfiguredLabelId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.UnconfiguredLabelId.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.UnconfiguredLabelId.prototype.setLabel = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.ConfiguredLabelId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.ConfiguredLabelId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.ConfiguredLabelId.displayName = 'proto.build_event_stream.BuildEventId.ConfiguredLabelId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.ConfiguredLabelId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.ConfiguredLabelId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.ConfiguredLabelId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.ConfiguredLabelId.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            configuration: (f = msg.getConfiguration()) && proto.build_event_stream.BuildEventId.ConfigurationId.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.ConfiguredLabelId}
 */
proto.build_event_stream.BuildEventId.ConfiguredLabelId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.ConfiguredLabelId;
    return proto.build_event_stream.BuildEventId.ConfiguredLabelId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.ConfiguredLabelId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.ConfiguredLabelId}
 */
proto.build_event_stream.BuildEventId.ConfiguredLabelId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = new proto.build_event_stream.BuildEventId.ConfigurationId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.ConfigurationId.deserializeBinaryFromReader);
                msg.setConfiguration(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.ConfiguredLabelId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.ConfiguredLabelId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.ConfiguredLabelId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.ConfiguredLabelId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getConfiguration();
    if (f != null) {
        writer.writeMessage(2, f, proto.build_event_stream.BuildEventId.ConfigurationId.serializeBinaryToWriter);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.ConfiguredLabelId.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.ConfiguredLabelId.prototype.setLabel = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional ConfigurationId configuration = 2;
 * @return {?proto.build_event_stream.BuildEventId.ConfigurationId}
 */
proto.build_event_stream.BuildEventId.ConfiguredLabelId.prototype.getConfiguration = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.ConfigurationId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.ConfigurationId, 2));
};
/** @param {?proto.build_event_stream.BuildEventId.ConfigurationId|undefined} value */
proto.build_event_stream.BuildEventId.ConfiguredLabelId.prototype.setConfiguration = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};
proto.build_event_stream.BuildEventId.ConfiguredLabelId.prototype.clearConfiguration = function () {
    this.setConfiguration(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.ConfiguredLabelId.prototype.hasConfiguration = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.TestResultId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.TestResultId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.TestResultId.displayName = 'proto.build_event_stream.BuildEventId.TestResultId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.TestResultId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.TestResultId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.TestResultId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.TestResultId.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            configuration: (f = msg.getConfiguration()) && proto.build_event_stream.BuildEventId.ConfigurationId.toObject(includeInstance, f),
            run: jspb.Message.getFieldWithDefault(msg, 2, 0),
            shard: jspb.Message.getFieldWithDefault(msg, 3, 0),
            attempt: jspb.Message.getFieldWithDefault(msg, 4, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.TestResultId}
 */
proto.build_event_stream.BuildEventId.TestResultId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.TestResultId;
    return proto.build_event_stream.BuildEventId.TestResultId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.TestResultId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.TestResultId}
 */
proto.build_event_stream.BuildEventId.TestResultId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 5:
                var value = new proto.build_event_stream.BuildEventId.ConfigurationId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.ConfigurationId.deserializeBinaryFromReader);
                msg.setConfiguration(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setRun(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setShard(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAttempt(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.TestResultId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.TestResultId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.TestResultId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.TestResultId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getConfiguration();
    if (f != null) {
        writer.writeMessage(5, f, proto.build_event_stream.BuildEventId.ConfigurationId.serializeBinaryToWriter);
    }
    f = message.getRun();
    if (f !== 0) {
        writer.writeInt32(2, f);
    }
    f = message.getShard();
    if (f !== 0) {
        writer.writeInt32(3, f);
    }
    f = message.getAttempt();
    if (f !== 0) {
        writer.writeInt32(4, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.TestResultId.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.TestResultId.prototype.setLabel = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional ConfigurationId configuration = 5;
 * @return {?proto.build_event_stream.BuildEventId.ConfigurationId}
 */
proto.build_event_stream.BuildEventId.TestResultId.prototype.getConfiguration = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.ConfigurationId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.ConfigurationId, 5));
};
/** @param {?proto.build_event_stream.BuildEventId.ConfigurationId|undefined} value */
proto.build_event_stream.BuildEventId.TestResultId.prototype.setConfiguration = function (value) {
    jspb.Message.setWrapperField(this, 5, value);
};
proto.build_event_stream.BuildEventId.TestResultId.prototype.clearConfiguration = function () {
    this.setConfiguration(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.TestResultId.prototype.hasConfiguration = function () {
    return jspb.Message.getField(this, 5) != null;
};
/**
 * optional int32 run = 2;
 * @return {number}
 */
proto.build_event_stream.BuildEventId.TestResultId.prototype.getRun = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {number} value */
proto.build_event_stream.BuildEventId.TestResultId.prototype.setRun = function (value) {
    jspb.Message.setField(this, 2, value);
};
/**
 * optional int32 shard = 3;
 * @return {number}
 */
proto.build_event_stream.BuildEventId.TestResultId.prototype.getShard = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/** @param {number} value */
proto.build_event_stream.BuildEventId.TestResultId.prototype.setShard = function (value) {
    jspb.Message.setField(this, 3, value);
};
/**
 * optional int32 attempt = 4;
 * @return {number}
 */
proto.build_event_stream.BuildEventId.TestResultId.prototype.getAttempt = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};
/** @param {number} value */
proto.build_event_stream.BuildEventId.TestResultId.prototype.setAttempt = function (value) {
    jspb.Message.setField(this, 4, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.TestSummaryId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.TestSummaryId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.TestSummaryId.displayName = 'proto.build_event_stream.BuildEventId.TestSummaryId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.TestSummaryId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.TestSummaryId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.TestSummaryId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.TestSummaryId.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            configuration: (f = msg.getConfiguration()) && proto.build_event_stream.BuildEventId.ConfigurationId.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.TestSummaryId}
 */
proto.build_event_stream.BuildEventId.TestSummaryId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.TestSummaryId;
    return proto.build_event_stream.BuildEventId.TestSummaryId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.TestSummaryId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.TestSummaryId}
 */
proto.build_event_stream.BuildEventId.TestSummaryId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = new proto.build_event_stream.BuildEventId.ConfigurationId;
                reader.readMessage(value, proto.build_event_stream.BuildEventId.ConfigurationId.deserializeBinaryFromReader);
                msg.setConfiguration(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.TestSummaryId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.TestSummaryId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.TestSummaryId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.TestSummaryId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getConfiguration();
    if (f != null) {
        writer.writeMessage(2, f, proto.build_event_stream.BuildEventId.ConfigurationId.serializeBinaryToWriter);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.build_event_stream.BuildEventId.TestSummaryId.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.build_event_stream.BuildEventId.TestSummaryId.prototype.setLabel = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional ConfigurationId configuration = 2;
 * @return {?proto.build_event_stream.BuildEventId.ConfigurationId}
 */
proto.build_event_stream.BuildEventId.TestSummaryId.prototype.getConfiguration = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.ConfigurationId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.ConfigurationId, 2));
};
/** @param {?proto.build_event_stream.BuildEventId.ConfigurationId|undefined} value */
proto.build_event_stream.BuildEventId.TestSummaryId.prototype.setConfiguration = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};
proto.build_event_stream.BuildEventId.TestSummaryId.prototype.clearConfiguration = function () {
    this.setConfiguration(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.TestSummaryId.prototype.hasConfiguration = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.BuildFinishedId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.BuildFinishedId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.BuildFinishedId.displayName = 'proto.build_event_stream.BuildEventId.BuildFinishedId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.BuildFinishedId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.BuildFinishedId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.BuildFinishedId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.BuildFinishedId.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.BuildFinishedId}
 */
proto.build_event_stream.BuildEventId.BuildFinishedId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.BuildFinishedId;
    return proto.build_event_stream.BuildEventId.BuildFinishedId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.BuildFinishedId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.BuildFinishedId}
 */
proto.build_event_stream.BuildEventId.BuildFinishedId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.BuildFinishedId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.BuildFinishedId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.BuildFinishedId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.BuildFinishedId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.BuildToolLogsId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.BuildToolLogsId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.BuildToolLogsId.displayName = 'proto.build_event_stream.BuildEventId.BuildToolLogsId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.BuildToolLogsId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.BuildToolLogsId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.BuildToolLogsId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.BuildToolLogsId.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.BuildToolLogsId}
 */
proto.build_event_stream.BuildEventId.BuildToolLogsId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.BuildToolLogsId;
    return proto.build_event_stream.BuildEventId.BuildToolLogsId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.BuildToolLogsId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.BuildToolLogsId}
 */
proto.build_event_stream.BuildEventId.BuildToolLogsId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.BuildToolLogsId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.BuildToolLogsId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.BuildToolLogsId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.BuildToolLogsId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.build_event_stream.BuildEventId.BuildMetricsId = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.build_event_stream.BuildEventId.BuildMetricsId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.build_event_stream.BuildEventId.BuildMetricsId.displayName = 'proto.build_event_stream.BuildEventId.BuildMetricsId';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.build_event_stream.BuildEventId.BuildMetricsId.prototype.toObject = function (opt_includeInstance) {
        return proto.build_event_stream.BuildEventId.BuildMetricsId.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.build_event_stream.BuildEventId.BuildMetricsId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.build_event_stream.BuildEventId.BuildMetricsId.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.build_event_stream.BuildEventId.BuildMetricsId}
 */
proto.build_event_stream.BuildEventId.BuildMetricsId.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.build_event_stream.BuildEventId.BuildMetricsId;
    return proto.build_event_stream.BuildEventId.BuildMetricsId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.build_event_stream.BuildEventId.BuildMetricsId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.build_event_stream.BuildEventId.BuildMetricsId}
 */
proto.build_event_stream.BuildEventId.BuildMetricsId.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.build_event_stream.BuildEventId.BuildMetricsId.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.build_event_stream.BuildEventId.BuildMetricsId.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.build_event_stream.BuildEventId.BuildMetricsId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.build_event_stream.BuildEventId.BuildMetricsId.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * optional UnknownBuildEventId unknown = 1;
 * @return {?proto.build_event_stream.BuildEventId.UnknownBuildEventId}
 */
proto.build_event_stream.BuildEventId.prototype.getUnknown = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.UnknownBuildEventId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.UnknownBuildEventId, 1));
};
/** @param {?proto.build_event_stream.BuildEventId.UnknownBuildEventId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setUnknown = function (value) {
    jspb.Message.setOneofWrapperField(this, 1, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearUnknown = function () {
    this.setUnknown(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasUnknown = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional ProgressId progress = 2;
 * @return {?proto.build_event_stream.BuildEventId.ProgressId}
 */
proto.build_event_stream.BuildEventId.prototype.getProgress = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.ProgressId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.ProgressId, 2));
};
/** @param {?proto.build_event_stream.BuildEventId.ProgressId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setProgress = function (value) {
    jspb.Message.setOneofWrapperField(this, 2, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearProgress = function () {
    this.setProgress(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasProgress = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional BuildStartedId started = 3;
 * @return {?proto.build_event_stream.BuildEventId.BuildStartedId}
 */
proto.build_event_stream.BuildEventId.prototype.getStarted = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.BuildStartedId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.BuildStartedId, 3));
};
/** @param {?proto.build_event_stream.BuildEventId.BuildStartedId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setStarted = function (value) {
    jspb.Message.setOneofWrapperField(this, 3, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearStarted = function () {
    this.setStarted(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasStarted = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional UnstructuredCommandLineId unstructured_command_line = 11;
 * @return {?proto.build_event_stream.BuildEventId.UnstructuredCommandLineId}
 */
proto.build_event_stream.BuildEventId.prototype.getUnstructuredCommandLine = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.UnstructuredCommandLineId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.UnstructuredCommandLineId, 11));
};
/** @param {?proto.build_event_stream.BuildEventId.UnstructuredCommandLineId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setUnstructuredCommandLine = function (value) {
    jspb.Message.setOneofWrapperField(this, 11, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearUnstructuredCommandLine = function () {
    this.setUnstructuredCommandLine(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasUnstructuredCommandLine = function () {
    return jspb.Message.getField(this, 11) != null;
};
/**
 * optional StructuredCommandLineId structured_command_line = 18;
 * @return {?proto.build_event_stream.BuildEventId.StructuredCommandLineId}
 */
proto.build_event_stream.BuildEventId.prototype.getStructuredCommandLine = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.StructuredCommandLineId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.StructuredCommandLineId, 18));
};
/** @param {?proto.build_event_stream.BuildEventId.StructuredCommandLineId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setStructuredCommandLine = function (value) {
    jspb.Message.setOneofWrapperField(this, 18, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearStructuredCommandLine = function () {
    this.setStructuredCommandLine(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasStructuredCommandLine = function () {
    return jspb.Message.getField(this, 18) != null;
};
/**
 * optional WorkspaceStatusId workspace_status = 14;
 * @return {?proto.build_event_stream.BuildEventId.WorkspaceStatusId}
 */
proto.build_event_stream.BuildEventId.prototype.getWorkspaceStatus = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.WorkspaceStatusId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.WorkspaceStatusId, 14));
};
/** @param {?proto.build_event_stream.BuildEventId.WorkspaceStatusId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setWorkspaceStatus = function (value) {
    jspb.Message.setOneofWrapperField(this, 14, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearWorkspaceStatus = function () {
    this.setWorkspaceStatus(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasWorkspaceStatus = function () {
    return jspb.Message.getField(this, 14) != null;
};
/**
 * optional OptionsParsedId options_parsed = 12;
 * @return {?proto.build_event_stream.BuildEventId.OptionsParsedId}
 */
proto.build_event_stream.BuildEventId.prototype.getOptionsParsed = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.OptionsParsedId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.OptionsParsedId, 12));
};
/** @param {?proto.build_event_stream.BuildEventId.OptionsParsedId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setOptionsParsed = function (value) {
    jspb.Message.setOneofWrapperField(this, 12, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearOptionsParsed = function () {
    this.setOptionsParsed(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasOptionsParsed = function () {
    return jspb.Message.getField(this, 12) != null;
};
/**
 * optional FetchId fetch = 17;
 * @return {?proto.build_event_stream.BuildEventId.FetchId}
 */
proto.build_event_stream.BuildEventId.prototype.getFetch = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.FetchId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.FetchId, 17));
};
/** @param {?proto.build_event_stream.BuildEventId.FetchId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setFetch = function (value) {
    jspb.Message.setOneofWrapperField(this, 17, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearFetch = function () {
    this.setFetch(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasFetch = function () {
    return jspb.Message.getField(this, 17) != null;
};
/**
 * optional ConfigurationId configuration = 15;
 * @return {?proto.build_event_stream.BuildEventId.ConfigurationId}
 */
proto.build_event_stream.BuildEventId.prototype.getConfiguration = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.ConfigurationId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.ConfigurationId, 15));
};
/** @param {?proto.build_event_stream.BuildEventId.ConfigurationId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setConfiguration = function (value) {
    jspb.Message.setOneofWrapperField(this, 15, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearConfiguration = function () {
    this.setConfiguration(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasConfiguration = function () {
    return jspb.Message.getField(this, 15) != null;
};
/**
 * optional TargetConfiguredId target_configured = 16;
 * @return {?proto.build_event_stream.BuildEventId.TargetConfiguredId}
 */
proto.build_event_stream.BuildEventId.prototype.getTargetConfigured = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.TargetConfiguredId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.TargetConfiguredId, 16));
};
/** @param {?proto.build_event_stream.BuildEventId.TargetConfiguredId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setTargetConfigured = function (value) {
    jspb.Message.setOneofWrapperField(this, 16, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearTargetConfigured = function () {
    this.setTargetConfigured(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasTargetConfigured = function () {
    return jspb.Message.getField(this, 16) != null;
};
/**
 * optional PatternExpandedId pattern = 4;
 * @return {?proto.build_event_stream.BuildEventId.PatternExpandedId}
 */
proto.build_event_stream.BuildEventId.prototype.getPattern = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.PatternExpandedId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.PatternExpandedId, 4));
};
/** @param {?proto.build_event_stream.BuildEventId.PatternExpandedId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setPattern = function (value) {
    jspb.Message.setOneofWrapperField(this, 4, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearPattern = function () {
    this.setPattern(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasPattern = function () {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional PatternExpandedId pattern_skipped = 10;
 * @return {?proto.build_event_stream.BuildEventId.PatternExpandedId}
 */
proto.build_event_stream.BuildEventId.prototype.getPatternSkipped = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.PatternExpandedId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.PatternExpandedId, 10));
};
/** @param {?proto.build_event_stream.BuildEventId.PatternExpandedId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setPatternSkipped = function (value) {
    jspb.Message.setOneofWrapperField(this, 10, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearPatternSkipped = function () {
    this.setPatternSkipped(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasPatternSkipped = function () {
    return jspb.Message.getField(this, 10) != null;
};
/**
 * optional NamedSetOfFilesId named_set = 13;
 * @return {?proto.build_event_stream.BuildEventId.NamedSetOfFilesId}
 */
proto.build_event_stream.BuildEventId.prototype.getNamedSet = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.NamedSetOfFilesId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.NamedSetOfFilesId, 13));
};
/** @param {?proto.build_event_stream.BuildEventId.NamedSetOfFilesId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setNamedSet = function (value) {
    jspb.Message.setOneofWrapperField(this, 13, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearNamedSet = function () {
    this.setNamedSet(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasNamedSet = function () {
    return jspb.Message.getField(this, 13) != null;
};
/**
 * optional TargetCompletedId target_completed = 5;
 * @return {?proto.build_event_stream.BuildEventId.TargetCompletedId}
 */
proto.build_event_stream.BuildEventId.prototype.getTargetCompleted = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.TargetCompletedId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.TargetCompletedId, 5));
};
/** @param {?proto.build_event_stream.BuildEventId.TargetCompletedId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setTargetCompleted = function (value) {
    jspb.Message.setOneofWrapperField(this, 5, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearTargetCompleted = function () {
    this.setTargetCompleted(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasTargetCompleted = function () {
    return jspb.Message.getField(this, 5) != null;
};
/**
 * optional ActionCompletedId action_completed = 6;
 * @return {?proto.build_event_stream.BuildEventId.ActionCompletedId}
 */
proto.build_event_stream.BuildEventId.prototype.getActionCompleted = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.ActionCompletedId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.ActionCompletedId, 6));
};
/** @param {?proto.build_event_stream.BuildEventId.ActionCompletedId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setActionCompleted = function (value) {
    jspb.Message.setOneofWrapperField(this, 6, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearActionCompleted = function () {
    this.setActionCompleted(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasActionCompleted = function () {
    return jspb.Message.getField(this, 6) != null;
};
/**
 * optional UnconfiguredLabelId unconfigured_label = 19;
 * @return {?proto.build_event_stream.BuildEventId.UnconfiguredLabelId}
 */
proto.build_event_stream.BuildEventId.prototype.getUnconfiguredLabel = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.UnconfiguredLabelId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.UnconfiguredLabelId, 19));
};
/** @param {?proto.build_event_stream.BuildEventId.UnconfiguredLabelId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setUnconfiguredLabel = function (value) {
    jspb.Message.setOneofWrapperField(this, 19, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearUnconfiguredLabel = function () {
    this.setUnconfiguredLabel(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasUnconfiguredLabel = function () {
    return jspb.Message.getField(this, 19) != null;
};
/**
 * optional ConfiguredLabelId configured_label = 21;
 * @return {?proto.build_event_stream.BuildEventId.ConfiguredLabelId}
 */
proto.build_event_stream.BuildEventId.prototype.getConfiguredLabel = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.ConfiguredLabelId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.ConfiguredLabelId, 21));
};
/** @param {?proto.build_event_stream.BuildEventId.ConfiguredLabelId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setConfiguredLabel = function (value) {
    jspb.Message.setOneofWrapperField(this, 21, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearConfiguredLabel = function () {
    this.setConfiguredLabel(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasConfiguredLabel = function () {
    return jspb.Message.getField(this, 21) != null;
};
/**
 * optional TestResultId test_result = 8;
 * @return {?proto.build_event_stream.BuildEventId.TestResultId}
 */
proto.build_event_stream.BuildEventId.prototype.getTestResult = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.TestResultId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.TestResultId, 8));
};
/** @param {?proto.build_event_stream.BuildEventId.TestResultId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setTestResult = function (value) {
    jspb.Message.setOneofWrapperField(this, 8, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearTestResult = function () {
    this.setTestResult(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasTestResult = function () {
    return jspb.Message.getField(this, 8) != null;
};
/**
 * optional TestSummaryId test_summary = 7;
 * @return {?proto.build_event_stream.BuildEventId.TestSummaryId}
 */
proto.build_event_stream.BuildEventId.prototype.getTestSummary = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.TestSummaryId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.TestSummaryId, 7));
};
/** @param {?proto.build_event_stream.BuildEventId.TestSummaryId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setTestSummary = function (value) {
    jspb.Message.setOneofWrapperField(this, 7, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearTestSummary = function () {
    this.setTestSummary(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasTestSummary = function () {
    return jspb.Message.getField(this, 7) != null;
};
/**
 * optional BuildFinishedId build_finished = 9;
 * @return {?proto.build_event_stream.BuildEventId.BuildFinishedId}
 */
proto.build_event_stream.BuildEventId.prototype.getBuildFinished = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.BuildFinishedId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.BuildFinishedId, 9));
};
/** @param {?proto.build_event_stream.BuildEventId.BuildFinishedId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setBuildFinished = function (value) {
    jspb.Message.setOneofWrapperField(this, 9, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearBuildFinished = function () {
    this.setBuildFinished(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasBuildFinished = function () {
    return jspb.Message.getField(this, 9) != null;
};
/**
 * optional BuildToolLogsId build_tool_logs = 20;
 * @return {?proto.build_event_stream.BuildEventId.BuildToolLogsId}
 */
proto.build_event_stream.BuildEventId.prototype.getBuildToolLogs = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.BuildToolLogsId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.BuildToolLogsId, 20));
};
/** @param {?proto.build_event_stream.BuildEventId.BuildToolLogsId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setBuildToolLogs = function (value) {
    jspb.Message.setOneofWrapperField(this, 20, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearBuildToolLogs = function () {
    this.setBuildToolLogs(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasBuildToolLogs = function () {
    return jspb.Message.getField(this, 20) != null;
};
/**
 * optional BuildMetricsId build_metrics = 22;
 * @return {?proto.build_event_stream.BuildEventId.BuildMetricsId}
 */
proto.build_event_stream.BuildEventId.prototype.getBuildMetrics = function () {
    return /** @type{?proto.build_event_stream.BuildEventId.BuildMetricsId} */ (jspb.Message.getWrapperField(this, proto.build_event_stream.BuildEventId.BuildMetricsId, 22));
};
/** @param {?proto.build_event_stream.BuildEventId.BuildMetricsId|undefined} value */
proto.build_event_stream.BuildEventId.prototype.setBuildMetrics = function (value) {
    jspb.Message.setOneofWrapperField(this, 22, proto.build_event_stream.BuildEventId.oneofGroups_[0], value);
};
proto.build_event_stream.BuildEventId.prototype.clearBuildMetrics = function () {
    this.setBuildMetrics(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.build_event_stream.BuildEventId.prototype.hasBuildMetrics = function () {
    return jspb.Message.getField(this, 22) != null;
};
//# sourceMappingURL=buildeventid.js.map