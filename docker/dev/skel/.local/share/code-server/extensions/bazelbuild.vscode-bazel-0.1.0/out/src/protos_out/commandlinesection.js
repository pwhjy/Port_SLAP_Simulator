"use strict";
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
goog.provide('proto.command_line.CommandLineSection');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.command_line.ChunkList');
goog.require('proto.command_line.OptionList');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.command_line.CommandLineSection = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.command_line.CommandLineSection.oneofGroups_);
};
goog.inherits(proto.command_line.CommandLineSection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.command_line.CommandLineSection.displayName = 'proto.command_line.CommandLineSection';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.command_line.CommandLineSection.oneofGroups_ = [[2, 3]];
/**
 * @enum {number}
 */
proto.command_line.CommandLineSection.SectionTypeCase = {
    SECTION_TYPE_NOT_SET: 0,
    CHUNK_LIST: 2,
    OPTION_LIST: 3
};
/**
 * @return {proto.command_line.CommandLineSection.SectionTypeCase}
 */
proto.command_line.CommandLineSection.prototype.getSectionTypeCase = function () {
    return /** @type {proto.command_line.CommandLineSection.SectionTypeCase} */ (jspb.Message.computeOneofCase(this, proto.command_line.CommandLineSection.oneofGroups_[0]));
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.command_line.CommandLineSection.prototype.toObject = function (opt_includeInstance) {
        return proto.command_line.CommandLineSection.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.command_line.CommandLineSection} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.command_line.CommandLineSection.toObject = function (includeInstance, msg) {
        var f, obj = {
            sectionLabel: jspb.Message.getFieldWithDefault(msg, 1, ""),
            chunkList: (f = msg.getChunkList()) && proto.command_line.ChunkList.toObject(includeInstance, f),
            optionList: (f = msg.getOptionList()) && proto.command_line.OptionList.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.command_line.CommandLineSection}
 */
proto.command_line.CommandLineSection.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.command_line.CommandLineSection;
    return proto.command_line.CommandLineSection.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.command_line.CommandLineSection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.command_line.CommandLineSection}
 */
proto.command_line.CommandLineSection.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setSectionLabel(value);
                break;
            case 2:
                var value = new proto.command_line.ChunkList;
                reader.readMessage(value, proto.command_line.ChunkList.deserializeBinaryFromReader);
                msg.setChunkList(value);
                break;
            case 3:
                var value = new proto.command_line.OptionList;
                reader.readMessage(value, proto.command_line.OptionList.deserializeBinaryFromReader);
                msg.setOptionList(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.command_line.CommandLineSection.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.command_line.CommandLineSection.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.command_line.CommandLineSection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.command_line.CommandLineSection.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSectionLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getChunkList();
    if (f != null) {
        writer.writeMessage(2, f, proto.command_line.ChunkList.serializeBinaryToWriter);
    }
    f = message.getOptionList();
    if (f != null) {
        writer.writeMessage(3, f, proto.command_line.OptionList.serializeBinaryToWriter);
    }
};
/**
 * optional string section_label = 1;
 * @return {string}
 */
proto.command_line.CommandLineSection.prototype.getSectionLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.command_line.CommandLineSection.prototype.setSectionLabel = function (value) {
    jspb.Message.setField(this, 1, value);
};
/**
 * optional ChunkList chunk_list = 2;
 * @return {?proto.command_line.ChunkList}
 */
proto.command_line.CommandLineSection.prototype.getChunkList = function () {
    return /** @type{?proto.command_line.ChunkList} */ (jspb.Message.getWrapperField(this, proto.command_line.ChunkList, 2));
};
/** @param {?proto.command_line.ChunkList|undefined} value */
proto.command_line.CommandLineSection.prototype.setChunkList = function (value) {
    jspb.Message.setOneofWrapperField(this, 2, proto.command_line.CommandLineSection.oneofGroups_[0], value);
};
proto.command_line.CommandLineSection.prototype.clearChunkList = function () {
    this.setChunkList(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.command_line.CommandLineSection.prototype.hasChunkList = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional OptionList option_list = 3;
 * @return {?proto.command_line.OptionList}
 */
proto.command_line.CommandLineSection.prototype.getOptionList = function () {
    return /** @type{?proto.command_line.OptionList} */ (jspb.Message.getWrapperField(this, proto.command_line.OptionList, 3));
};
/** @param {?proto.command_line.OptionList|undefined} value */
proto.command_line.CommandLineSection.prototype.setOptionList = function (value) {
    jspb.Message.setOneofWrapperField(this, 3, proto.command_line.CommandLineSection.oneofGroups_[0], value);
};
proto.command_line.CommandLineSection.prototype.clearOptionList = function () {
    this.setOptionList(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.command_line.CommandLineSection.prototype.hasOptionList = function () {
    return jspb.Message.getField(this, 3) != null;
};
//# sourceMappingURL=commandlinesection.js.map