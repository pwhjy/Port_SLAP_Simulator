/// <reference types="node" />
import fs from 'fs';
import { ReplaceItem } from './types';
export declare function replaceText(content: string, items: ReplaceItem[]): string;
export declare function flatten<T>(arr: T[][]): T[];
export declare function statAsync(filepath: string): Promise<fs.Stats>;
export declare function writeFileAsync(fullpath: any, content: string): Promise<void>;
export declare function readFileAsync(fullpath: any, encoding?: string): Promise<string>;
export declare function readdirAsync(filepath: string): Promise<string[]>;
export declare function headTail(line: string): [string, string] | null;
export declare function memorize<R extends (...args: any[]) => Promise<R>>(_target: any, key: string, descriptor: any): void;
export declare function trimQuote(str: string): string;
export declare function distinct<T>(array: T[], keyFn?: (t: T) => string): T[];
/**
 * Convert python regex to javascript regex,
 * throw error when unsupported pattern found
 *
 * @public
 * @param {string} str
 * @returns {string}
 */
export declare function convertRegex(str: string): string;
export declare function wait(ms: number): Promise<any>;
export declare function getRegexText(prefix: string): string;
export declare function markdownBlock(code: string, filetype: string): string;
