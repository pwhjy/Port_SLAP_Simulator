import { Document, OutputChannel } from 'coc.nvim';
import { Position, Range } from 'vscode-languageserver-types';
import BaseProvider, { Config } from './baseProvider';
import { Snippet, SnippetEdit } from './types';
export interface ISnippetPluginContribution {
    prefix: string;
    body: string[];
    description: string;
}
export interface SnippetDefinition {
    extensionId: string;
    snippets: Map<string, string[]>;
}
export interface SnippetCache {
    [language: string]: Snippet[];
}
export interface ExtensionCache {
    [id: string]: SnippetCache;
}
export declare class TextmateProvider extends BaseProvider {
    private channel;
    private trace;
    private _snippetCache;
    private _userSnippets;
    constructor(channel: OutputChannel, trace: string, config: Config);
    init(): Promise<void>;
    getSnippetFiles(): Promise<string[]>;
    getTriggerSnippets(document: Document, position: Position, autoTrigger?: boolean): Promise<SnippetEdit[]>;
    getSnippets(): Promise<Snippet[]>;
    resolveSnippetBody(snip: Snippet, _range: Range): Promise<string>;
    private loadSnippetsFromExtension;
    private loadSnippetsFromRoot;
    private loadSnippetsFromDefinition;
    private loadSnippetsFromFile;
    private loadSnippetsFromText;
}
