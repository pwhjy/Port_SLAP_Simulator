"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/******************************************************************
MIT License http://www.opensource.org/licenses/mit-license.php
Author Qiming Zhao <chemzqm@gmail> (https://github.com/chemzqm)
*******************************************************************/
const coc_nvim_1 = require("coc.nvim");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const vscode_uri_1 = tslib_1.__importDefault(require("vscode-uri"));
const os_1 = tslib_1.__importDefault(require("os"));
class SnippetsList extends coc_nvim_1.BasicList {
    constructor(nvim, manager, mru) {
        super(nvim);
        this.manager = manager;
        this.mru = mru;
        this.name = 'snippets';
        this.description = 'snippets list';
        this.addLocationActions();
    }
    async loadItems(context) {
        let { window } = context;
        let valid = await window.valid;
        if (!valid)
            return;
        let buf = await window.buffer;
        let doc = coc_nvim_1.workspace.getDocument(buf.id);
        if (!doc)
            return [];
        let snippets = await this.manager.getSnippets();
        let res = [];
        let recents = await this.mru.load();
        for (let snip of snippets) {
            let pos = vscode_languageserver_protocol_1.Position.create(snip.lnum, 0);
            let location = vscode_languageserver_protocol_1.Location.create(vscode_uri_1.default.file(snip.filepath).toString(), vscode_languageserver_protocol_1.Range.create(pos, pos));
            let prefix = snip.prefix;
            if (prefix.length < 20) {
                prefix = `${prefix}${' '.repeat(20 - prefix.length)}`;
            }
            let idx = recents.indexOf(snip.prefix);
            res.push({
                label: `${prefix}\t${snip.description}\t${snip.filepath.replace(os_1.default.homedir(), '~')}`,
                filterText: `${snip.prefix} ${snip.description}`,
                location,
                recentScore: idx == -1 ? -1 : recents.length - idx
            });
        }
        return res;
    }
    async doHighlight() {
        let { nvim } = coc_nvim_1.workspace;
        nvim.pauseNotification();
        nvim.command('syntax match CocSnippetsPrefix /\\v^\\S+/ contained containedin=CocSnippetsLine', true);
        nvim.command('syntax match CocSnippetsFile /\\v\\t\\S+$/ contained containedin=CocSnippetsLine', true);
        nvim.command('highlight default link CocSnippetsPrefix Identifier', true);
        nvim.command('highlight default link CocSnippetsFile Comment', true);
        await nvim.resumeNotification();
    }
}
exports.default = SnippetsList;
//# sourceMappingURL=snippet.js.map