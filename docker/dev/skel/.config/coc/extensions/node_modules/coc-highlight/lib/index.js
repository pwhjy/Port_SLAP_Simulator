"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const vscode_uri_1 = tslib_1.__importDefault(require("vscode-uri"));
var FetchKeywordRequest;
(function (FetchKeywordRequest) {
    FetchKeywordRequest.type = new vscode_languageserver_protocol_1.RequestType('highlight/iskeyword');
})(FetchKeywordRequest || (FetchKeywordRequest = {}));
const exitCalled = new vscode_languageserver_protocol_1.NotificationType('highlight/exitCalled');
const keywordsMap = {};
function activate(context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let { subscriptions } = context;
        const config = coc_nvim_1.workspace.getConfiguration('highlight');
        const file = context.asAbsolutePath('./lib/server/index.js');
        let serverOptions = {
            module: file,
            args: ['--node-ipc'],
            transport: coc_nvim_1.TransportKind.ipc,
            options: {
                cwd: coc_nvim_1.workspace.root,
                execArgv: config.get('execArgv', [])
            }
        };
        let clientOptions = {
            documentSelector: [{ scheme: '*' }],
            synchronize: {
                configurationSection: 'highlight'
            },
            outputChannelName: 'highlight'
        };
        let client = new coc_nvim_1.LanguageClient('highlight', 'highlight server', serverOptions, clientOptions);
        coc_nvim_1.workspace.documents.forEach((doc) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            let { buffer, uri } = doc;
            let iskeyword = yield buffer.getOption('iskeyword');
            keywordsMap[uri] = iskeyword;
        }));
        client.onReady().then(() => {
            client.onRequest(FetchKeywordRequest.type, uri => {
                return keywordsMap[uri] || '@,48-57,_';
            });
            client.onNotification(exitCalled, ([code, stack]) => {
                if (code != 0) {
                    coc_nvim_1.workspace.showMessage(`highlight server exited with ${code}`);
                }
                if (stack) {
                    // tslint:disable-next-line:no-console
                    console.error(stack);
                }
            });
            coc_nvim_1.workspace.onDidOpenTextDocument((document) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                let doc = coc_nvim_1.workspace.getDocument(document.uri);
                if (!doc)
                    return;
                let { scheme } = vscode_uri_1.default.parse(doc.uri);
                if (['quickfix', 'term', 'nofile'].indexOf(scheme) != -1)
                    return;
                let { bufnr } = doc;
                let loaded = yield coc_nvim_1.workspace.nvim.call('bufloaded', bufnr);
                if (loaded != 1)
                    return;
                let iskeyword = yield doc.buffer.getOption('iskeyword');
                keywordsMap[doc.uri] = iskeyword;
            }), null, subscriptions);
        }, e => {
            // tslint:disable-next-line:no-console
            console.error(`highlight server start failed: ${e.message}`);
        });
        subscriptions.push(coc_nvim_1.services.registLanguageClient(client));
    });
}
exports.activate = activate;
//# sourceMappingURL=index.js.map