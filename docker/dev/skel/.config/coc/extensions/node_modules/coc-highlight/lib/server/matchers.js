"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const color_1 = tslib_1.__importDefault(require("color"));
const color_name_1 = tslib_1.__importDefault(require("color-name"));
const vscode_languageserver_1 = require("vscode-languageserver");
const names = Object.keys(color_name_1.default);
const colorHex = /((?:\#)([a-f0-9]{6}([a-f0-9]{2})?|[a-f0-9]{3}([a-f0-9]{1})?))\b/gi;
const colorFunctions = /(?:(rgb|hsl)a?\([\d]{1,3}%?,\s*[\d]{1,3}%?,\s*[\d]{1,3}%?(,\s*\d?\.?\d+)?\))/gi;
const colorHwb = /(?:(hwb)\(\d+,\s*(100|0*\d{1,2})%,\s*(100|0*\d{1,2})%(,\s*0?\.?\d+)?\))/gi;
function getNameColor(word) {
    if (names.indexOf(word) == -1)
        return null;
    let c = new color_1.default(word);
    return { red: c.red() / 255, green: c.green() / 255, blue: c.blue() / 255, alpha: 1 };
}
exports.getNameColor = getNameColor;
function findColorHex(document) {
    return findColors(document, colorHex);
}
exports.findColorHex = findColorHex;
function findColorFunctions(document) {
    return findColors(document, colorFunctions);
}
exports.findColorFunctions = findColorFunctions;
function findHwb(document) {
    return findColors(document, colorHwb);
}
exports.findHwb = findHwb;
function findColors(document, regex) {
    let text = document.getText();
    let match = regex.exec(text);
    let result = [];
    while (match !== null) {
        const start = match.index;
        try {
            const c = new color_1.default(match[0].toLowerCase());
            result.push({
                color: { red: c.red() / 255, green: c.green() / 255, blue: c.blue() / 255, alpha: c.alpha() },
                range: vscode_languageserver_1.Range.create(document.positionAt(start), document.positionAt(start + match[0].length))
            });
        }
        catch (e) {
            // noop
            console.error(e.stack);
        }
        match = regex.exec(text);
    }
    return result;
}
//# sourceMappingURL=matchers.js.map