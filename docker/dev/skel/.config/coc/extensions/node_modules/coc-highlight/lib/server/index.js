"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const color_1 = tslib_1.__importDefault(require("color"));
const vscode_languageserver_1 = require("vscode-languageserver");
const vscode_uri_1 = tslib_1.__importDefault(require("vscode-uri"));
const document_1 = tslib_1.__importDefault(require("./document"));
var FetchKeywordRequest;
(function (FetchKeywordRequest) {
    FetchKeywordRequest.type = new vscode_languageserver_1.RequestType('highlight/iskeyword');
})(FetchKeywordRequest || (FetchKeywordRequest = {}));
const documentMap = new Map();
const settings = { highlightEnable: true, colorsEnable: true, disableLanguages: [] };
const exitCalled = new vscode_languageserver_1.NotificationType('highlight/exitCalled');
const nodeExit = process.exit;
process.exit = ((code) => {
    let stack = new Error('stack');
    connection.sendNotification(exitCalled, [code ? code : 0, stack.stack]);
    setTimeout(() => {
        nodeExit(code);
    }, 1000);
});
process.on('uncaughtException', (error) => {
    let message;
    if (error) {
        if (typeof error.stack === 'string') {
            message = error.stack;
        }
        else if (typeof error.message === 'string') {
            message = error.message;
        }
        else if (typeof error === 'string') {
            message = error;
        }
        if (!message) {
            message = JSON.stringify(error, undefined, 4);
        }
    }
    // tslint:disable-next-line:no-console
    console.error('Uncaught exception recevied.');
    if (message) {
        // tslint:disable-next-line:no-console
        console.error(message);
    }
});
function trace(message, verbose) {
    connection.tracer.log(message, verbose);
}
let connection = vscode_languageserver_1.createConnection();
// tslint:disable-next-line:no-console
console.log = connection.console.log.bind(connection.console);
// tslint:disable-next-line:no-console
console.error = connection.console.error.bind(connection.console);
connection.console.info(`Highlight server running in node ${process.version}`);
let documents = new vscode_languageserver_1.TextDocuments();
// The documents manager listen for text document create, change
// and close on the connection
documents.listen(connection);
documents.onDidOpen((event) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let { document } = event;
    let { uri } = document;
    let u = vscode_uri_1.default.parse(uri);
    // filter invalid scheme
    if (['quickfix', 'term', 'nofile'].indexOf(u.scheme) != -1)
        return;
    if (isDisabled(document.languageId))
        return;
    let iskeyword = yield Promise.resolve(connection.sendRequest(FetchKeywordRequest.type, uri));
    let doc = new document_1.default(document, iskeyword, settings);
    documentMap.set(uri, doc);
}));
connection.onNotification(vscode_languageserver_1.DidChangeTextDocumentNotification.type, (p) => {
    let { uri } = p.textDocument;
    let doc = documentMap.get(uri);
    if (!doc)
        return;
    doc.applyContentChanges(p.contentChanges, p.textDocument.version);
    doc.update();
});
documents.onDidClose(event => {
    let { uri } = event.document;
    let doc = documentMap.get(uri);
    if (!doc)
        return;
    doc.dispose();
    documentMap.delete(uri);
});
connection.onRequest(vscode_languageserver_1.DocumentHighlightRequest.type, ({ textDocument, position }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let { uri } = textDocument;
    if (!settings.highlightEnable)
        return [];
    let doc = documentMap.get(uri);
    if (!doc)
        return [];
    let symbols = yield doc.documentSymbols;
    let curr = symbols.find(o => positionInRange(position, o.range) == 0);
    if (!curr)
        return [];
    let text = curr.text;
    let ranges = symbols.filter(o => o.text == text).map(s => s.range);
    return ranges.map(r => {
        return { range: r };
    });
}));
connection.onRequest(vscode_languageserver_1.DocumentColorRequest.type, ({ textDocument }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    if (!settings.colorsEnable)
        return [];
    let { uri } = textDocument;
    let doc = documentMap.get(uri);
    if (!doc)
        return [];
    return yield doc.colors;
}));
connection.onRequest(vscode_languageserver_1.ColorPresentationRequest.type, (params) => {
    let { color } = params;
    let c = new color_1.default([color.red * 255, color.green * 255, color.blue * 255, color.alpha]);
    let lables = [c.hex(), c.rgb().toString(), c.hsl().toString()];
    return lables.map(s => {
        return { label: s };
    });
});
connection.onDidChangeConfiguration((change) => {
    let { highlight } = change.settings;
    settings.highlightEnable = highlight.document.enable;
    settings.colorsEnable = highlight.colors.enable;
    let disableLanguages = settings.disableLanguages = highlight.disableLanguages;
    for (let doc of documentMap.values()) {
        if (disableLanguages.indexOf(doc.languageId) !== -1) {
            doc.dispose();
            documentMap.delete(doc.uri);
        }
    }
});
connection.onInitialize(_params => {
    return {
        capabilities: {
            textDocumentSync: {
                openClose: true,
                change: vscode_languageserver_1.TextDocumentSyncKind.Incremental
            },
            documentHighlightProvider: true,
            colorProvider: true
        }
    };
});
connection.tracer.connection.listen();
function positionInRange(position, range) {
    let { start, end } = range;
    if (comparePosition(position, start) < 0)
        return -1;
    if (comparePosition(position, end) > 0)
        return 1;
    return 0;
}
function comparePosition(position, other) {
    if (position.line > other.line)
        return 1;
    if (other.line == position.line && position.character > other.character)
        return 1;
    if (other.line == position.line && position.character == other.character)
        return 0;
    return -1;
}
function isDisabled(languageId) {
    return settings.disableLanguages.indexOf(languageId) !== -1;
}
//# sourceMappingURL=index.js.map