"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const chars_1 = require("./chars");
const colors_1 = require("./colors");
const debounce_1 = tslib_1.__importDefault(require("debounce"));
class Document {
    constructor(document, iskeyword, settings) {
        this.document = document;
        this.iskeyword = iskeyword;
        this.settings = settings;
        this._documentSymbols = [];
        this._colors = [];
        this._parsedVersion = 0;
        this.uri = document.uri;
        this.languageId = document.languageId;
        this.chars = new chars_1.Chars(iskeyword);
        this.update = debounce_1.default(() => {
            this._update();
        }, 100);
        this._update();
    }
    get version() {
        return this.document.version;
    }
    applyContentChanges(events, version) {
        let { document } = this;
        for (let ev of events) {
            let edit = {
                range: ev.range,
                newText: ev.text
            };
            let content = vscode_languageserver_protocol_1.TextDocument.applyEdits(document, [edit]);
            document = vscode_languageserver_protocol_1.TextDocument.create(this.uri, this.languageId, version, content);
        }
        this.document = document;
    }
    get documentSymbols() {
        if (this.version == this._parsedVersion)
            return Promise.resolve(this._documentSymbols);
        return new Promise(resolve => {
            setTimeout(() => {
                resolve(this._documentSymbols);
            }, 150);
        });
    }
    get colors() {
        if (this.version == this._parsedVersion)
            return Promise.resolve(this._colors);
        return new Promise(resolve => {
            setTimeout(() => {
                resolve(this._colors);
            }, 150);
        });
    }
    dispose() {
        this.update.clear();
    }
    _update() {
        let { version } = this;
        this._documentSymbols = this.chars.matchSymbols(this.document);
        this._colors = colors_1.parseDocumentColors(this.document, this._documentSymbols);
        this._parsedVersion = version;
    }
}
exports.default = Document;
//# sourceMappingURL=document.js.map